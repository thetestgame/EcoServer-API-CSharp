/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EcoServerAPI.Client;

namespace EcoServerAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChatApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns all non-private player chat messages sent within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns></returns>
        void ChatGetChat (string authtoken, string authtokentype, double? startDay = null, double? endDay = null);

        /// <summary>
        /// Returns all non-private player chat messages sent within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChatGetChatWithHttpInfo (string authtoken, string authtokentype, double? startDay = null, double? endDay = null);
        /// <summary>
        /// Returns all non-private player chat messages sent to the given tag within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="tag">The tag name in question. (optional)</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns></returns>
        void ChatGetChatByTag (string authtoken, string authtokentype, string tag = null, double? startDay = null, double? endDay = null);

        /// <summary>
        /// Returns all non-private player chat messages sent to the given tag within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="tag">The tag name in question. (optional)</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChatGetChatByTagWithHttpInfo (string authtoken, string authtokentype, string tag = null, double? startDay = null, double? endDay = null);
        /// <summary>
        /// Returns all non-private chat messages sent by the given user within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user in question.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns></returns>
        void ChatGetChatMessagesSentBy (string username, string authtoken, string authtokentype, double? startDay = null, double? endDay = null);

        /// <summary>
        /// Returns all non-private chat messages sent by the given user within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user in question.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChatGetChatMessagesSentByWithHttpInfo (string username, string authtoken, string authtokentype, double? startDay = null, double? endDay = null);
        /// <summary>
        /// Gets the. &lt;code&gt;numNextMessages&lt;/code&gt; chat messages sent after the given message on the same tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numNextMessages">The number of following messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns></returns>
        void ChatGetNext (string authtoken, string authtokentype, int? numNextMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null);

        /// <summary>
        /// Gets the. &lt;code&gt;numNextMessages&lt;/code&gt; chat messages sent after the given message on the same tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numNextMessages">The number of following messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChatGetNextWithHttpInfo (string authtoken, string authtokentype, int? numNextMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null);
        /// <summary>
        /// Gets the. &lt;code&gt;numPreviousMessages&lt;/code&gt; chat messages sent before the given message on the same tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numPreviousMessages">The number of preceding messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns></returns>
        void ChatGetPrevious (string authtoken, string authtokentype, int? numPreviousMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null);

        /// <summary>
        /// Gets the. &lt;code&gt;numPreviousMessages&lt;/code&gt; chat messages sent before the given message on the same tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numPreviousMessages">The number of preceding messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChatGetPreviousWithHttpInfo (string authtoken, string authtokentype, int? numPreviousMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null);
        /// <summary>
        /// Sends chat message like username.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="username">User who wants to send message. (optional)</param>
        /// <param name="message">The message to send. (optional)</param>
        /// <returns></returns>
        void ChatSendChat (string authtoken, string authtokentype, string username = null, string message = null);

        /// <summary>
        /// Sends chat message like username.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="username">User who wants to send message. (optional)</param>
        /// <param name="message">The message to send. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChatSendChatWithHttpInfo (string authtoken, string authtokentype, string username = null, string message = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Returns all non-private player chat messages sent within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChatGetChatAsync (string authtoken, string authtokentype, double? startDay = null, double? endDay = null);

        /// <summary>
        /// Returns all non-private player chat messages sent within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetChatAsyncWithHttpInfo (string authtoken, string authtokentype, double? startDay = null, double? endDay = null);
        /// <summary>
        /// Returns all non-private player chat messages sent to the given tag within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="tag">The tag name in question. (optional)</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChatGetChatByTagAsync (string authtoken, string authtokentype, string tag = null, double? startDay = null, double? endDay = null);

        /// <summary>
        /// Returns all non-private player chat messages sent to the given tag within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="tag">The tag name in question. (optional)</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetChatByTagAsyncWithHttpInfo (string authtoken, string authtokentype, string tag = null, double? startDay = null, double? endDay = null);
        /// <summary>
        /// Returns all non-private chat messages sent by the given user within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user in question.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChatGetChatMessagesSentByAsync (string username, string authtoken, string authtokentype, double? startDay = null, double? endDay = null);

        /// <summary>
        /// Returns all non-private chat messages sent by the given user within the given time range.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user in question.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetChatMessagesSentByAsyncWithHttpInfo (string username, string authtoken, string authtokentype, double? startDay = null, double? endDay = null);
        /// <summary>
        /// Gets the. &lt;code&gt;numNextMessages&lt;/code&gt; chat messages sent after the given message on the same tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numNextMessages">The number of following messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChatGetNextAsync (string authtoken, string authtokentype, int? numNextMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null);

        /// <summary>
        /// Gets the. &lt;code&gt;numNextMessages&lt;/code&gt; chat messages sent after the given message on the same tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numNextMessages">The number of following messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetNextAsyncWithHttpInfo (string authtoken, string authtokentype, int? numNextMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null);
        /// <summary>
        /// Gets the. &lt;code&gt;numPreviousMessages&lt;/code&gt; chat messages sent before the given message on the same tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numPreviousMessages">The number of preceding messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChatGetPreviousAsync (string authtoken, string authtokentype, int? numPreviousMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null);

        /// <summary>
        /// Gets the. &lt;code&gt;numPreviousMessages&lt;/code&gt; chat messages sent before the given message on the same tag.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numPreviousMessages">The number of preceding messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetPreviousAsyncWithHttpInfo (string authtoken, string authtokentype, int? numPreviousMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null);
        /// <summary>
        /// Sends chat message like username.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="username">User who wants to send message. (optional)</param>
        /// <param name="message">The message to send. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChatSendChatAsync (string authtoken, string authtokentype, string username = null, string message = null);

        /// <summary>
        /// Sends chat message like username.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="username">User who wants to send message. (optional)</param>
        /// <param name="message">The message to send. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChatSendChatAsyncWithHttpInfo (string authtoken, string authtokentype, string username = null, string message = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChatApi : IChatApi
    {
        private EcoServerAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChatApi(String basePath)
        {
            this.Configuration = new EcoServerAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EcoServerAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChatApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChatApi(EcoServerAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EcoServerAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EcoServerAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EcoServerAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EcoServerAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns all non-private player chat messages sent within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns></returns>
        public void ChatGetChat (string authtoken, string authtokentype, double? startDay = null, double? endDay = null)
        {
             ChatGetChatWithHttpInfo(authtoken, authtokentype, startDay, endDay);
        }

        /// <summary>
        /// Returns all non-private player chat messages sent within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChatGetChatWithHttpInfo (string authtoken, string authtokentype, double? startDay = null, double? endDay = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetChat");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetChat");

            var localVarPath = "/api/v1/chat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDay", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDay", endDay)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns all non-private player chat messages sent within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChatGetChatAsync (string authtoken, string authtokentype, double? startDay = null, double? endDay = null)
        {
             await ChatGetChatAsyncWithHttpInfo(authtoken, authtokentype, startDay, endDay);

        }

        /// <summary>
        /// Returns all non-private player chat messages sent within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetChatAsyncWithHttpInfo (string authtoken, string authtokentype, double? startDay = null, double? endDay = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetChat");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetChat");

            var localVarPath = "/api/v1/chat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDay", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDay", endDay)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns all non-private player chat messages sent to the given tag within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="tag">The tag name in question. (optional)</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns></returns>
        public void ChatGetChatByTag (string authtoken, string authtokentype, string tag = null, double? startDay = null, double? endDay = null)
        {
             ChatGetChatByTagWithHttpInfo(authtoken, authtokentype, tag, startDay, endDay);
        }

        /// <summary>
        /// Returns all non-private player chat messages sent to the given tag within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="tag">The tag name in question. (optional)</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChatGetChatByTagWithHttpInfo (string authtoken, string authtokentype, string tag = null, double? startDay = null, double? endDay = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetChatByTag");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetChatByTag");

            var localVarPath = "/api/v1/chat/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDay", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDay", endDay)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetChatByTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns all non-private player chat messages sent to the given tag within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="tag">The tag name in question. (optional)</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChatGetChatByTagAsync (string authtoken, string authtokentype, string tag = null, double? startDay = null, double? endDay = null)
        {
             await ChatGetChatByTagAsyncWithHttpInfo(authtoken, authtokentype, tag, startDay, endDay);

        }

        /// <summary>
        /// Returns all non-private player chat messages sent to the given tag within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="tag">The tag name in question. (optional)</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetChatByTagAsyncWithHttpInfo (string authtoken, string authtokentype, string tag = null, double? startDay = null, double? endDay = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetChatByTag");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetChatByTag");

            var localVarPath = "/api/v1/chat/tag";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tag", tag)); // query parameter
            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDay", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDay", endDay)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetChatByTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns all non-private chat messages sent by the given user within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user in question.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns></returns>
        public void ChatGetChatMessagesSentBy (string username, string authtoken, string authtokentype, double? startDay = null, double? endDay = null)
        {
             ChatGetChatMessagesSentByWithHttpInfo(username, authtoken, authtokentype, startDay, endDay);
        }

        /// <summary>
        /// Returns all non-private chat messages sent by the given user within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user in question.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChatGetChatMessagesSentByWithHttpInfo (string username, string authtoken, string authtokentype, double? startDay = null, double? endDay = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling ChatApi->ChatGetChatMessagesSentBy");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetChatMessagesSentBy");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetChatMessagesSentBy");

            var localVarPath = "/api/v1/chat/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDay", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDay", endDay)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetChatMessagesSentBy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns all non-private chat messages sent by the given user within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user in question.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChatGetChatMessagesSentByAsync (string username, string authtoken, string authtokentype, double? startDay = null, double? endDay = null)
        {
             await ChatGetChatMessagesSentByAsyncWithHttpInfo(username, authtoken, authtokentype, startDay, endDay);

        }

        /// <summary>
        /// Returns all non-private chat messages sent by the given user within the given time range. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The user in question.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="startDay">The lower bound on the time range. Default is 0. (optional, default to 0)</param>
        /// <param name="endDay">The upper bound on the time range. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetChatMessagesSentByAsyncWithHttpInfo (string username, string authtoken, string authtokentype, double? startDay = null, double? endDay = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling ChatApi->ChatGetChatMessagesSentBy");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetChatMessagesSentBy");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetChatMessagesSentBy");

            var localVarPath = "/api/v1/chat/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (startDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDay", startDay)); // query parameter
            if (endDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDay", endDay)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetChatMessagesSentBy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the. &lt;code&gt;numNextMessages&lt;/code&gt; chat messages sent after the given message on the same tag. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numNextMessages">The number of following messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns></returns>
        public void ChatGetNext (string authtoken, string authtokentype, int? numNextMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null)
        {
             ChatGetNextWithHttpInfo(authtoken, authtokentype, numNextMessages, body);
        }

        /// <summary>
        /// Gets the. &lt;code&gt;numNextMessages&lt;/code&gt; chat messages sent after the given message on the same tag. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numNextMessages">The number of following messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChatGetNextWithHttpInfo (string authtoken, string authtokentype, int? numNextMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetNext");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetNext");

            var localVarPath = "/api/v1/chat/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numNextMessages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numNextMessages", numNextMessages)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetNext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the. &lt;code&gt;numNextMessages&lt;/code&gt; chat messages sent after the given message on the same tag. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numNextMessages">The number of following messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChatGetNextAsync (string authtoken, string authtokentype, int? numNextMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null)
        {
             await ChatGetNextAsyncWithHttpInfo(authtoken, authtokentype, numNextMessages, body);

        }

        /// <summary>
        /// Gets the. &lt;code&gt;numNextMessages&lt;/code&gt; chat messages sent after the given message on the same tag. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numNextMessages">The number of following messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetNextAsyncWithHttpInfo (string authtoken, string authtokentype, int? numNextMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetNext");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetNext");

            var localVarPath = "/api/v1/chat/next";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numNextMessages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numNextMessages", numNextMessages)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetNext", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the. &lt;code&gt;numPreviousMessages&lt;/code&gt; chat messages sent before the given message on the same tag. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numPreviousMessages">The number of preceding messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns></returns>
        public void ChatGetPrevious (string authtoken, string authtokentype, int? numPreviousMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null)
        {
             ChatGetPreviousWithHttpInfo(authtoken, authtokentype, numPreviousMessages, body);
        }

        /// <summary>
        /// Gets the. &lt;code&gt;numPreviousMessages&lt;/code&gt; chat messages sent before the given message on the same tag. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numPreviousMessages">The number of preceding messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChatGetPreviousWithHttpInfo (string authtoken, string authtokentype, int? numPreviousMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetPrevious");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetPrevious");

            var localVarPath = "/api/v1/chat/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numPreviousMessages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numPreviousMessages", numPreviousMessages)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetPrevious", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the. &lt;code&gt;numPreviousMessages&lt;/code&gt; chat messages sent before the given message on the same tag. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numPreviousMessages">The number of preceding messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChatGetPreviousAsync (string authtoken, string authtokentype, int? numPreviousMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null)
        {
             await ChatGetPreviousAsyncWithHttpInfo(authtoken, authtokentype, numPreviousMessages, body);

        }

        /// <summary>
        /// Gets the. &lt;code&gt;numPreviousMessages&lt;/code&gt; chat messages sent before the given message on the same tag. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="numPreviousMessages">The number of preceding messages to return. (optional)</param>
        /// <param name="body">The message in question. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChatGetPreviousAsyncWithHttpInfo (string authtoken, string authtokentype, int? numPreviousMessages = null, EcoWebServerDataTransferObjectsChatMessageDTO body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatGetPrevious");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatGetPrevious");

            var localVarPath = "/api/v1/chat/previous";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (numPreviousMessages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numPreviousMessages", numPreviousMessages)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatGetPrevious", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sends chat message like username. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="username">User who wants to send message. (optional)</param>
        /// <param name="message">The message to send. (optional)</param>
        /// <returns></returns>
        public void ChatSendChat (string authtoken, string authtokentype, string username = null, string message = null)
        {
             ChatSendChatWithHttpInfo(authtoken, authtokentype, username, message);
        }

        /// <summary>
        /// Sends chat message like username. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="username">User who wants to send message. (optional)</param>
        /// <param name="message">The message to send. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChatSendChatWithHttpInfo (string authtoken, string authtokentype, string username = null, string message = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatSendChat");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatSendChat");

            var localVarPath = "/api/v1/chat/sendChat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (message != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message", message)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatSendChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sends chat message like username. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="username">User who wants to send message. (optional)</param>
        /// <param name="message">The message to send. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChatSendChatAsync (string authtoken, string authtokentype, string username = null, string message = null)
        {
             await ChatSendChatAsyncWithHttpInfo(authtoken, authtokentype, username, message);

        }

        /// <summary>
        /// Sends chat message like username. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="username">User who wants to send message. (optional)</param>
        /// <param name="message">The message to send. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChatSendChatAsyncWithHttpInfo (string authtoken, string authtokentype, string username = null, string message = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ChatApi->ChatSendChat");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ChatApi->ChatSendChat");

            var localVarPath = "/api/v1/chat/sendChat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "username", username)); // query parameter
            if (message != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "message", message)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChatSendChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
