/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EcoServerAPI.Client;

namespace EcoServerAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataExportApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>string</returns>
        string DataExportGetActionList (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataExportGetActionListWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>string</returns>
        string DataExportGetEnvironmentList (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataExportGetEnvironmentListWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="actionName"> (optional)</param>
        /// <returns>string</returns>
        string DataExportGetExportAction (string authtoken, string authtokentype, string actionName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="actionName"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataExportGetExportActionWithHttpInfo (string authtoken, string authtokentype, string actionName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="category"> (optional)</param>
        /// <param name="units"> (optional, default to PPM)</param>
        /// <param name="column"> (optional, default to Climate)</param>
        /// <returns>string</returns>
        string DataExportGetExportEnvironment (string authtoken, string authtokentype, string category = null, string units = null, string column = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="category"> (optional)</param>
        /// <param name="units"> (optional, default to PPM)</param>
        /// <param name="column"> (optional, default to Climate)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataExportGetExportEnvironmentWithHttpInfo (string authtoken, string authtokentype, string category = null, string units = null, string column = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="speciesName"> (optional)</param>
        /// <returns>string</returns>
        string DataExportGetExportSpecies (string authtoken, string authtokentype, string speciesName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="speciesName"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataExportGetExportSpeciesWithHttpInfo (string authtoken, string authtokentype, string speciesName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>string</returns>
        string DataExportGetSpeciesList (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DataExportGetSpeciesListWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void DataExportPostExportActions (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataExportPostExportActionsWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void DataExportPostExportAll (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataExportPostExportAllWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void DataExportPostExportChat (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataExportPostExportChatWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void DataExportPostExportEnvironment (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataExportPostExportEnvironmentWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void DataExportPostExportSpecies (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataExportPostExportSpeciesWithHttpInfo (string authtoken, string authtokentype);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataExportGetActionListAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetActionListAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataExportGetEnvironmentListAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetEnvironmentListAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="actionName"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataExportGetExportActionAsync (string authtoken, string authtokentype, string actionName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="actionName"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetExportActionAsyncWithHttpInfo (string authtoken, string authtokentype, string actionName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="category"> (optional)</param>
        /// <param name="units"> (optional, default to PPM)</param>
        /// <param name="column"> (optional, default to Climate)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataExportGetExportEnvironmentAsync (string authtoken, string authtokentype, string category = null, string units = null, string column = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="category"> (optional)</param>
        /// <param name="units"> (optional, default to PPM)</param>
        /// <param name="column"> (optional, default to Climate)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetExportEnvironmentAsyncWithHttpInfo (string authtoken, string authtokentype, string category = null, string units = null, string column = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="speciesName"> (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataExportGetExportSpeciesAsync (string authtoken, string authtokentype, string speciesName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="speciesName"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetExportSpeciesAsyncWithHttpInfo (string authtoken, string authtokentype, string speciesName = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DataExportGetSpeciesListAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetSpeciesListAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataExportPostExportActionsAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportActionsAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataExportPostExportAllAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportAllAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataExportPostExportChatAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportChatAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataExportPostExportEnvironmentAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportEnvironmentAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataExportPostExportSpeciesAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportSpeciesAsyncWithHttpInfo (string authtoken, string authtokentype);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataExportApi : IDataExportApi
    {
        private EcoServerAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataExportApi(String basePath)
        {
            this.Configuration = new EcoServerAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EcoServerAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataExportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataExportApi(EcoServerAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EcoServerAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EcoServerAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EcoServerAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EcoServerAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>string</returns>
        public string DataExportGetActionList (string authtoken, string authtokentype)
        {
             ApiResponse<string> localVarResponse = DataExportGetActionListWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DataExportGetActionListWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetActionList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetActionList");

            var localVarPath = "/api/v1/exporter/actionlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetActionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataExportGetActionListAsync (string authtoken, string authtokentype)
        {
             ApiResponse<string> localVarResponse = await DataExportGetActionListAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetActionListAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetActionList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetActionList");

            var localVarPath = "/api/v1/exporter/actionlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetActionList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>string</returns>
        public string DataExportGetEnvironmentList (string authtoken, string authtokentype)
        {
             ApiResponse<string> localVarResponse = DataExportGetEnvironmentListWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DataExportGetEnvironmentListWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetEnvironmentList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetEnvironmentList");

            var localVarPath = "/api/v1/exporter/environmentlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetEnvironmentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataExportGetEnvironmentListAsync (string authtoken, string authtokentype)
        {
             ApiResponse<string> localVarResponse = await DataExportGetEnvironmentListAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetEnvironmentListAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetEnvironmentList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetEnvironmentList");

            var localVarPath = "/api/v1/exporter/environmentlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetEnvironmentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="actionName"> (optional)</param>
        /// <returns>string</returns>
        public string DataExportGetExportAction (string authtoken, string authtokentype, string actionName = null)
        {
             ApiResponse<string> localVarResponse = DataExportGetExportActionWithHttpInfo(authtoken, authtokentype, actionName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="actionName"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DataExportGetExportActionWithHttpInfo (string authtoken, string authtokentype, string actionName = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetExportAction");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetExportAction");

            var localVarPath = "/api/v1/exporter/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actionName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actionName", actionName)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetExportAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="actionName"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataExportGetExportActionAsync (string authtoken, string authtokentype, string actionName = null)
        {
             ApiResponse<string> localVarResponse = await DataExportGetExportActionAsyncWithHttpInfo(authtoken, authtokentype, actionName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="actionName"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetExportActionAsyncWithHttpInfo (string authtoken, string authtokentype, string actionName = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetExportAction");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetExportAction");

            var localVarPath = "/api/v1/exporter/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (actionName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "actionName", actionName)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetExportAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="category"> (optional)</param>
        /// <param name="units"> (optional, default to PPM)</param>
        /// <param name="column"> (optional, default to Climate)</param>
        /// <returns>string</returns>
        public string DataExportGetExportEnvironment (string authtoken, string authtokentype, string category = null, string units = null, string column = null)
        {
             ApiResponse<string> localVarResponse = DataExportGetExportEnvironmentWithHttpInfo(authtoken, authtokentype, category, units, column);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="category"> (optional)</param>
        /// <param name="units"> (optional, default to PPM)</param>
        /// <param name="column"> (optional, default to Climate)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DataExportGetExportEnvironmentWithHttpInfo (string authtoken, string authtokentype, string category = null, string units = null, string column = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetExportEnvironment");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetExportEnvironment");

            var localVarPath = "/api/v1/exporter/environment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (units != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "units", units)); // query parameter
            if (column != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "column", column)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetExportEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="category"> (optional)</param>
        /// <param name="units"> (optional, default to PPM)</param>
        /// <param name="column"> (optional, default to Climate)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataExportGetExportEnvironmentAsync (string authtoken, string authtokentype, string category = null, string units = null, string column = null)
        {
             ApiResponse<string> localVarResponse = await DataExportGetExportEnvironmentAsyncWithHttpInfo(authtoken, authtokentype, category, units, column);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="category"> (optional)</param>
        /// <param name="units"> (optional, default to PPM)</param>
        /// <param name="column"> (optional, default to Climate)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetExportEnvironmentAsyncWithHttpInfo (string authtoken, string authtokentype, string category = null, string units = null, string column = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetExportEnvironment");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetExportEnvironment");

            var localVarPath = "/api/v1/exporter/environment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (units != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "units", units)); // query parameter
            if (column != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "column", column)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetExportEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="speciesName"> (optional)</param>
        /// <returns>string</returns>
        public string DataExportGetExportSpecies (string authtoken, string authtokentype, string speciesName = null)
        {
             ApiResponse<string> localVarResponse = DataExportGetExportSpeciesWithHttpInfo(authtoken, authtokentype, speciesName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="speciesName"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DataExportGetExportSpeciesWithHttpInfo (string authtoken, string authtokentype, string speciesName = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetExportSpecies");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetExportSpecies");

            var localVarPath = "/api/v1/exporter/species";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (speciesName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "speciesName", speciesName)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetExportSpecies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="speciesName"> (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataExportGetExportSpeciesAsync (string authtoken, string authtokentype, string speciesName = null)
        {
             ApiResponse<string> localVarResponse = await DataExportGetExportSpeciesAsyncWithHttpInfo(authtoken, authtokentype, speciesName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="speciesName"> (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetExportSpeciesAsyncWithHttpInfo (string authtoken, string authtokentype, string speciesName = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetExportSpecies");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetExportSpecies");

            var localVarPath = "/api/v1/exporter/species";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (speciesName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "speciesName", speciesName)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetExportSpecies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>string</returns>
        public string DataExportGetSpeciesList (string authtoken, string authtokentype)
        {
             ApiResponse<string> localVarResponse = DataExportGetSpeciesListWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > DataExportGetSpeciesListWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetSpeciesList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetSpeciesList");

            var localVarPath = "/api/v1/exporter/specieslist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetSpeciesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DataExportGetSpeciesListAsync (string authtoken, string authtokentype)
        {
             ApiResponse<string> localVarResponse = await DataExportGetSpeciesListAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> DataExportGetSpeciesListAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportGetSpeciesList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportGetSpeciesList");

            var localVarPath = "/api/v1/exporter/specieslist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportGetSpeciesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void DataExportPostExportActions (string authtoken, string authtokentype)
        {
             DataExportPostExportActionsWithHttpInfo(authtoken, authtokentype);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataExportPostExportActionsWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportActions");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportActions");

            var localVarPath = "/api/v1/exporter/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataExportPostExportActionsAsync (string authtoken, string authtokentype)
        {
             await DataExportPostExportActionsAsyncWithHttpInfo(authtoken, authtokentype);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportActionsAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportActions");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportActions");

            var localVarPath = "/api/v1/exporter/actions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportActions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void DataExportPostExportAll (string authtoken, string authtokentype)
        {
             DataExportPostExportAllWithHttpInfo(authtoken, authtokentype);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataExportPostExportAllWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportAll");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportAll");

            var localVarPath = "/api/v1/exporter/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataExportPostExportAllAsync (string authtoken, string authtokentype)
        {
             await DataExportPostExportAllAsyncWithHttpInfo(authtoken, authtokentype);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportAllAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportAll");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportAll");

            var localVarPath = "/api/v1/exporter/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void DataExportPostExportChat (string authtoken, string authtokentype)
        {
             DataExportPostExportChatWithHttpInfo(authtoken, authtokentype);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataExportPostExportChatWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportChat");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportChat");

            var localVarPath = "/api/v1/exporter/chat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataExportPostExportChatAsync (string authtoken, string authtokentype)
        {
             await DataExportPostExportChatAsyncWithHttpInfo(authtoken, authtokentype);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportChatAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportChat");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportChat");

            var localVarPath = "/api/v1/exporter/chat";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportChat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void DataExportPostExportEnvironment (string authtoken, string authtokentype)
        {
             DataExportPostExportEnvironmentWithHttpInfo(authtoken, authtokentype);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataExportPostExportEnvironmentWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportEnvironment");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportEnvironment");

            var localVarPath = "/api/v1/exporter/environment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataExportPostExportEnvironmentAsync (string authtoken, string authtokentype)
        {
             await DataExportPostExportEnvironmentAsyncWithHttpInfo(authtoken, authtokentype);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportEnvironmentAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportEnvironment");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportEnvironment");

            var localVarPath = "/api/v1/exporter/environment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportEnvironment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void DataExportPostExportSpecies (string authtoken, string authtokentype)
        {
             DataExportPostExportSpeciesWithHttpInfo(authtoken, authtokentype);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataExportPostExportSpeciesWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportSpecies");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportSpecies");

            var localVarPath = "/api/v1/exporter/species";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportSpecies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataExportPostExportSpeciesAsync (string authtoken, string authtokentype)
        {
             await DataExportPostExportSpeciesAsyncWithHttpInfo(authtoken, authtokentype);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataExportPostExportSpeciesAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling DataExportApi->DataExportPostExportSpecies");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling DataExportApi->DataExportPostExportSpecies");

            var localVarPath = "/api/v1/exporter/species";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataExportPostExportSpecies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
