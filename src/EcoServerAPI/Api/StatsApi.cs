/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EcoServerAPI.Client;
using EcoServerAPI.Model;

namespace EcoServerAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generates fake stat data for testing.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="days">The number of days to simulate. (optional)</param>
        /// <param name="users">The number of users to simulate. (optional)</param>
        /// <param name="generateClimateData">Whether to generate climate data. Default is false. (optional, default to false)</param>
        /// <param name="pollutionMultiplier">How much pollution to generate. Default is 1. (optional, default to 1)</param>
        /// <returns></returns>
        void StatsGenerateTestData (string authtoken, string authtokentype, float? days = null, int? users = null, bool? generateClimateData = null, float? pollutionMultiplier = null);

        /// <summary>
        /// Generates fake stat data for testing.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="days">The number of days to simulate. (optional)</param>
        /// <param name="users">The number of users to simulate. (optional)</param>
        /// <param name="generateClimateData">Whether to generate climate data. Default is false. (optional, default to false)</param>
        /// <param name="pollutionMultiplier">How much pollution to generate. Default is 1. (optional, default to 1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StatsGenerateTestDataWithHttpInfo (string authtoken, string authtokentype, float? days = null, int? users = null, bool? generateClimateData = null, float? pollutionMultiplier = null);
        /// <summary>
        /// /// Returns Eco.WebServer.Web.Controllers.StatsController.MaximumSamples data points between dayStart and dayEnd of the selected data.             If there are more than Eco.WebServer.Web.Controllers.StatsController.MaximumSamples samples, it will be averaged out to contain exactly Eco.WebServer.Web.Controllers.StatsController.MaximumSamples.///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="dataset">dataset to take the data from. (optional)</param>
        /// <param name="dayStart">Day from which on data is returned. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>EcoWebServerWebControllersStatReturn</returns>
        EcoWebServerWebControllersStatReturn StatsGet (string authtoken, string authtokentype, string dataset = null, double? dayStart = null, double? dayEnd = null);

        /// <summary>
        /// /// Returns Eco.WebServer.Web.Controllers.StatsController.MaximumSamples data points between dayStart and dayEnd of the selected data.             If there are more than Eco.WebServer.Web.Controllers.StatsController.MaximumSamples samples, it will be averaged out to contain exactly Eco.WebServer.Web.Controllers.StatsController.MaximumSamples.///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="dataset">dataset to take the data from. (optional)</param>
        /// <param name="dayStart">Day from which on data is returned. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of EcoWebServerWebControllersStatReturn</returns>
        ApiResponse<EcoWebServerWebControllersStatReturn> StatsGetWithHttpInfo (string authtoken, string authtokentype, string dataset = null, double? dayStart = null, double? dayEnd = null);
        /// <summary>
        /// /// Returns all stat infos that contain data, formatted as a list, where each key is a list of strings. ///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;EcoStatsStatInfo&gt;</returns>
        List<EcoStatsStatInfo> StatsGetFlatList (string authtoken, string authtokentype);

        /// <summary>
        /// /// Returns all stat infos that contain data, formatted as a list, where each key is a list of strings. ///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;EcoStatsStatInfo&gt;</returns>
        ApiResponse<List<EcoStatsStatInfo>> StatsGetFlatListWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Returns a \&quot;package\&quot; of multiple statistics in the order of their request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="requestedSets">A list of statistics that should be returned. (optional)</param>
        /// <param name="dayStart">Day from which the data should be taken from. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>List&lt;EcoWebServerWebControllersStatReturn&gt;</returns>
        List<EcoWebServerWebControllersStatReturn> StatsGetList (string authtoken, string authtokentype, List<string> requestedSets = null, double? dayStart = null, double? dayEnd = null);

        /// <summary>
        /// Returns a \&quot;package\&quot; of multiple statistics in the order of their request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="requestedSets">A list of statistics that should be returned. (optional)</param>
        /// <param name="dayStart">Day from which the data should be taken from. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerWebControllersStatReturn&gt;</returns>
        ApiResponse<List<EcoWebServerWebControllersStatReturn>> StatsGetListWithHttpInfo (string authtoken, string authtokentype, List<string> requestedSets = null, double? dayStart = null, double? dayEnd = null);
        /// <summary>
        /// /// Returns the timerange of the simulation, in days///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;float?&gt;</returns>
        List<float?> StatsGetTimeRange (string authtoken, string authtokentype);

        /// <summary>
        /// /// Returns the timerange of the simulation, in days///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;float?&gt;</returns>
        ApiResponse<List<float?>> StatsGetTimeRangeWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Returns all dataset keys, formatted as a tree. ///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>EcoStatsStatCategory</returns>
        EcoStatsStatCategory StatsGetTreeList (string authtoken, string authtokentype);

        /// <summary>
        /// Returns all dataset keys, formatted as a tree. ///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of EcoStatsStatCategory</returns>
        ApiResponse<EcoStatsStatCategory> StatsGetTreeListWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Returns the list of premade graphs to be displayed on the front page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;EcoStatsNamedGraph&gt;</returns>
        List<EcoStatsNamedGraph> StatsGraphs (string authtoken, string authtokentype);

        /// <summary>
        /// Returns the list of premade graphs to be displayed on the front page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;EcoStatsNamedGraph&gt;</returns>
        ApiResponse<List<EcoStatsNamedGraph>> StatsGraphsWithHttpInfo (string authtoken, string authtokentype);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Generates fake stat data for testing.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="days">The number of days to simulate. (optional)</param>
        /// <param name="users">The number of users to simulate. (optional)</param>
        /// <param name="generateClimateData">Whether to generate climate data. Default is false. (optional, default to false)</param>
        /// <param name="pollutionMultiplier">How much pollution to generate. Default is 1. (optional, default to 1)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StatsGenerateTestDataAsync (string authtoken, string authtokentype, float? days = null, int? users = null, bool? generateClimateData = null, float? pollutionMultiplier = null);

        /// <summary>
        /// Generates fake stat data for testing.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="days">The number of days to simulate. (optional)</param>
        /// <param name="users">The number of users to simulate. (optional)</param>
        /// <param name="generateClimateData">Whether to generate climate data. Default is false. (optional, default to false)</param>
        /// <param name="pollutionMultiplier">How much pollution to generate. Default is 1. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StatsGenerateTestDataAsyncWithHttpInfo (string authtoken, string authtokentype, float? days = null, int? users = null, bool? generateClimateData = null, float? pollutionMultiplier = null);
        /// <summary>
        /// /// Returns Eco.WebServer.Web.Controllers.StatsController.MaximumSamples data points between dayStart and dayEnd of the selected data.             If there are more than Eco.WebServer.Web.Controllers.StatsController.MaximumSamples samples, it will be averaged out to contain exactly Eco.WebServer.Web.Controllers.StatsController.MaximumSamples.///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="dataset">dataset to take the data from. (optional)</param>
        /// <param name="dayStart">Day from which on data is returned. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>Task of EcoWebServerWebControllersStatReturn</returns>
        System.Threading.Tasks.Task<EcoWebServerWebControllersStatReturn> StatsGetAsync (string authtoken, string authtokentype, string dataset = null, double? dayStart = null, double? dayEnd = null);

        /// <summary>
        /// /// Returns Eco.WebServer.Web.Controllers.StatsController.MaximumSamples data points between dayStart and dayEnd of the selected data.             If there are more than Eco.WebServer.Web.Controllers.StatsController.MaximumSamples samples, it will be averaged out to contain exactly Eco.WebServer.Web.Controllers.StatsController.MaximumSamples.///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="dataset">dataset to take the data from. (optional)</param>
        /// <param name="dayStart">Day from which on data is returned. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (EcoWebServerWebControllersStatReturn)</returns>
        System.Threading.Tasks.Task<ApiResponse<EcoWebServerWebControllersStatReturn>> StatsGetAsyncWithHttpInfo (string authtoken, string authtokentype, string dataset = null, double? dayStart = null, double? dayEnd = null);
        /// <summary>
        /// /// Returns all stat infos that contain data, formatted as a list, where each key is a list of strings. ///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;EcoStatsStatInfo&gt;</returns>
        System.Threading.Tasks.Task<List<EcoStatsStatInfo>> StatsGetFlatListAsync (string authtoken, string authtokentype);

        /// <summary>
        /// /// Returns all stat infos that contain data, formatted as a list, where each key is a list of strings. ///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;EcoStatsStatInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoStatsStatInfo>>> StatsGetFlatListAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Returns a \&quot;package\&quot; of multiple statistics in the order of their request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="requestedSets">A list of statistics that should be returned. (optional)</param>
        /// <param name="dayStart">Day from which the data should be taken from. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>Task of List&lt;EcoWebServerWebControllersStatReturn&gt;</returns>
        System.Threading.Tasks.Task<List<EcoWebServerWebControllersStatReturn>> StatsGetListAsync (string authtoken, string authtokentype, List<string> requestedSets = null, double? dayStart = null, double? dayEnd = null);

        /// <summary>
        /// Returns a \&quot;package\&quot; of multiple statistics in the order of their request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="requestedSets">A list of statistics that should be returned. (optional)</param>
        /// <param name="dayStart">Day from which the data should be taken from. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerWebControllersStatReturn&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerWebControllersStatReturn>>> StatsGetListAsyncWithHttpInfo (string authtoken, string authtokentype, List<string> requestedSets = null, double? dayStart = null, double? dayEnd = null);
        /// <summary>
        /// /// Returns the timerange of the simulation, in days///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;float?&gt;</returns>
        System.Threading.Tasks.Task<List<float?>> StatsGetTimeRangeAsync (string authtoken, string authtokentype);

        /// <summary>
        /// /// Returns the timerange of the simulation, in days///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;float?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<float?>>> StatsGetTimeRangeAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Returns all dataset keys, formatted as a tree. ///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of EcoStatsStatCategory</returns>
        System.Threading.Tasks.Task<EcoStatsStatCategory> StatsGetTreeListAsync (string authtoken, string authtokentype);

        /// <summary>
        /// Returns all dataset keys, formatted as a tree. ///.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (EcoStatsStatCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<EcoStatsStatCategory>> StatsGetTreeListAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Returns the list of premade graphs to be displayed on the front page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;EcoStatsNamedGraph&gt;</returns>
        System.Threading.Tasks.Task<List<EcoStatsNamedGraph>> StatsGraphsAsync (string authtoken, string authtokentype);

        /// <summary>
        /// Returns the list of premade graphs to be displayed on the front page.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;EcoStatsNamedGraph&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoStatsNamedGraph>>> StatsGraphsAsyncWithHttpInfo (string authtoken, string authtokentype);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatsApi : IStatsApi
    {
        private EcoServerAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatsApi(String basePath)
        {
            this.Configuration = new EcoServerAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EcoServerAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatsApi(EcoServerAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EcoServerAPI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EcoServerAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EcoServerAPI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EcoServerAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Generates fake stat data for testing. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="days">The number of days to simulate. (optional)</param>
        /// <param name="users">The number of users to simulate. (optional)</param>
        /// <param name="generateClimateData">Whether to generate climate data. Default is false. (optional, default to false)</param>
        /// <param name="pollutionMultiplier">How much pollution to generate. Default is 1. (optional, default to 1)</param>
        /// <returns></returns>
        public void StatsGenerateTestData (string authtoken, string authtokentype, float? days = null, int? users = null, bool? generateClimateData = null, float? pollutionMultiplier = null)
        {
             StatsGenerateTestDataWithHttpInfo(authtoken, authtokentype, days, users, generateClimateData, pollutionMultiplier);
        }

        /// <summary>
        /// Generates fake stat data for testing. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="days">The number of days to simulate. (optional)</param>
        /// <param name="users">The number of users to simulate. (optional)</param>
        /// <param name="generateClimateData">Whether to generate climate data. Default is false. (optional, default to false)</param>
        /// <param name="pollutionMultiplier">How much pollution to generate. Default is 1. (optional, default to 1)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StatsGenerateTestDataWithHttpInfo (string authtoken, string authtokentype, float? days = null, int? users = null, bool? generateClimateData = null, float? pollutionMultiplier = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGenerateTestData");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGenerateTestData");

            var localVarPath = "/datasets/generatetestdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter
            if (users != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "users", users)); // query parameter
            if (generateClimateData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generateClimateData", generateClimateData)); // query parameter
            if (pollutionMultiplier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pollutionMultiplier", pollutionMultiplier)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGenerateTestData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Generates fake stat data for testing. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="days">The number of days to simulate. (optional)</param>
        /// <param name="users">The number of users to simulate. (optional)</param>
        /// <param name="generateClimateData">Whether to generate climate data. Default is false. (optional, default to false)</param>
        /// <param name="pollutionMultiplier">How much pollution to generate. Default is 1. (optional, default to 1)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StatsGenerateTestDataAsync (string authtoken, string authtokentype, float? days = null, int? users = null, bool? generateClimateData = null, float? pollutionMultiplier = null)
        {
             await StatsGenerateTestDataAsyncWithHttpInfo(authtoken, authtokentype, days, users, generateClimateData, pollutionMultiplier);

        }

        /// <summary>
        /// Generates fake stat data for testing. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="days">The number of days to simulate. (optional)</param>
        /// <param name="users">The number of users to simulate. (optional)</param>
        /// <param name="generateClimateData">Whether to generate climate data. Default is false. (optional, default to false)</param>
        /// <param name="pollutionMultiplier">How much pollution to generate. Default is 1. (optional, default to 1)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StatsGenerateTestDataAsyncWithHttpInfo (string authtoken, string authtokentype, float? days = null, int? users = null, bool? generateClimateData = null, float? pollutionMultiplier = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGenerateTestData");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGenerateTestData");

            var localVarPath = "/datasets/generatetestdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (days != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "days", days)); // query parameter
            if (users != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "users", users)); // query parameter
            if (generateClimateData != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generateClimateData", generateClimateData)); // query parameter
            if (pollutionMultiplier != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pollutionMultiplier", pollutionMultiplier)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGenerateTestData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// /// Returns Eco.WebServer.Web.Controllers.StatsController.MaximumSamples data points between dayStart and dayEnd of the selected data.             If there are more than Eco.WebServer.Web.Controllers.StatsController.MaximumSamples samples, it will be averaged out to contain exactly Eco.WebServer.Web.Controllers.StatsController.MaximumSamples.///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="dataset">dataset to take the data from. (optional)</param>
        /// <param name="dayStart">Day from which on data is returned. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>EcoWebServerWebControllersStatReturn</returns>
        public EcoWebServerWebControllersStatReturn StatsGet (string authtoken, string authtokentype, string dataset = null, double? dayStart = null, double? dayEnd = null)
        {
             ApiResponse<EcoWebServerWebControllersStatReturn> localVarResponse = StatsGetWithHttpInfo(authtoken, authtokentype, dataset, dayStart, dayEnd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// /// Returns Eco.WebServer.Web.Controllers.StatsController.MaximumSamples data points between dayStart and dayEnd of the selected data.             If there are more than Eco.WebServer.Web.Controllers.StatsController.MaximumSamples samples, it will be averaged out to contain exactly Eco.WebServer.Web.Controllers.StatsController.MaximumSamples.///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="dataset">dataset to take the data from. (optional)</param>
        /// <param name="dayStart">Day from which on data is returned. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of EcoWebServerWebControllersStatReturn</returns>
        public ApiResponse< EcoWebServerWebControllersStatReturn > StatsGetWithHttpInfo (string authtoken, string authtokentype, string dataset = null, double? dayStart = null, double? dayEnd = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGet");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGet");

            var localVarPath = "/datasets/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataset", dataset)); // query parameter
            if (dayStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayStart", dayStart)); // query parameter
            if (dayEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayEnd", dayEnd)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcoWebServerWebControllersStatReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EcoWebServerWebControllersStatReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcoWebServerWebControllersStatReturn)));
        }

        /// <summary>
        /// /// Returns Eco.WebServer.Web.Controllers.StatsController.MaximumSamples data points between dayStart and dayEnd of the selected data.             If there are more than Eco.WebServer.Web.Controllers.StatsController.MaximumSamples samples, it will be averaged out to contain exactly Eco.WebServer.Web.Controllers.StatsController.MaximumSamples.///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="dataset">dataset to take the data from. (optional)</param>
        /// <param name="dayStart">Day from which on data is returned. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>Task of EcoWebServerWebControllersStatReturn</returns>
        public async System.Threading.Tasks.Task<EcoWebServerWebControllersStatReturn> StatsGetAsync (string authtoken, string authtokentype, string dataset = null, double? dayStart = null, double? dayEnd = null)
        {
             ApiResponse<EcoWebServerWebControllersStatReturn> localVarResponse = await StatsGetAsyncWithHttpInfo(authtoken, authtokentype, dataset, dayStart, dayEnd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// /// Returns Eco.WebServer.Web.Controllers.StatsController.MaximumSamples data points between dayStart and dayEnd of the selected data.             If there are more than Eco.WebServer.Web.Controllers.StatsController.MaximumSamples samples, it will be averaged out to contain exactly Eco.WebServer.Web.Controllers.StatsController.MaximumSamples.///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="dataset">dataset to take the data from. (optional)</param>
        /// <param name="dayStart">Day from which on data is returned. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (EcoWebServerWebControllersStatReturn)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EcoWebServerWebControllersStatReturn>> StatsGetAsyncWithHttpInfo (string authtoken, string authtokentype, string dataset = null, double? dayStart = null, double? dayEnd = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGet");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGet");

            var localVarPath = "/datasets/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dataset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataset", dataset)); // query parameter
            if (dayStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayStart", dayStart)); // query parameter
            if (dayEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayEnd", dayEnd)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcoWebServerWebControllersStatReturn>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EcoWebServerWebControllersStatReturn) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcoWebServerWebControllersStatReturn)));
        }

        /// <summary>
        /// /// Returns all stat infos that contain data, formatted as a list, where each key is a list of strings. ///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;EcoStatsStatInfo&gt;</returns>
        public List<EcoStatsStatInfo> StatsGetFlatList (string authtoken, string authtokentype)
        {
             ApiResponse<List<EcoStatsStatInfo>> localVarResponse = StatsGetFlatListWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// /// Returns all stat infos that contain data, formatted as a list, where each key is a list of strings. ///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;EcoStatsStatInfo&gt;</returns>
        public ApiResponse< List<EcoStatsStatInfo> > StatsGetFlatListWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGetFlatList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGetFlatList");

            var localVarPath = "/datasets/flatlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetFlatList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoStatsStatInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoStatsStatInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoStatsStatInfo>)));
        }

        /// <summary>
        /// /// Returns all stat infos that contain data, formatted as a list, where each key is a list of strings. ///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;EcoStatsStatInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoStatsStatInfo>> StatsGetFlatListAsync (string authtoken, string authtokentype)
        {
             ApiResponse<List<EcoStatsStatInfo>> localVarResponse = await StatsGetFlatListAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// /// Returns all stat infos that contain data, formatted as a list, where each key is a list of strings. ///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;EcoStatsStatInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoStatsStatInfo>>> StatsGetFlatListAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGetFlatList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGetFlatList");

            var localVarPath = "/datasets/flatlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetFlatList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoStatsStatInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoStatsStatInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoStatsStatInfo>)));
        }

        /// <summary>
        /// Returns a \&quot;package\&quot; of multiple statistics in the order of their request. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="requestedSets">A list of statistics that should be returned. (optional)</param>
        /// <param name="dayStart">Day from which the data should be taken from. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>List&lt;EcoWebServerWebControllersStatReturn&gt;</returns>
        public List<EcoWebServerWebControllersStatReturn> StatsGetList (string authtoken, string authtokentype, List<string> requestedSets = null, double? dayStart = null, double? dayEnd = null)
        {
             ApiResponse<List<EcoWebServerWebControllersStatReturn>> localVarResponse = StatsGetListWithHttpInfo(authtoken, authtokentype, requestedSets, dayStart, dayEnd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a \&quot;package\&quot; of multiple statistics in the order of their request. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="requestedSets">A list of statistics that should be returned. (optional)</param>
        /// <param name="dayStart">Day from which the data should be taken from. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerWebControllersStatReturn&gt;</returns>
        public ApiResponse< List<EcoWebServerWebControllersStatReturn> > StatsGetListWithHttpInfo (string authtoken, string authtokentype, List<string> requestedSets = null, double? dayStart = null, double? dayEnd = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGetList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGetList");

            var localVarPath = "/datasets/getlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestedSets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "requestedSets", requestedSets)); // query parameter
            if (dayStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayStart", dayStart)); // query parameter
            if (dayEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayEnd", dayEnd)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerWebControllersStatReturn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerWebControllersStatReturn>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerWebControllersStatReturn>)));
        }

        /// <summary>
        /// Returns a \&quot;package\&quot; of multiple statistics in the order of their request. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="requestedSets">A list of statistics that should be returned. (optional)</param>
        /// <param name="dayStart">Day from which the data should be taken from. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>Task of List&lt;EcoWebServerWebControllersStatReturn&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoWebServerWebControllersStatReturn>> StatsGetListAsync (string authtoken, string authtokentype, List<string> requestedSets = null, double? dayStart = null, double? dayEnd = null)
        {
             ApiResponse<List<EcoWebServerWebControllersStatReturn>> localVarResponse = await StatsGetListAsyncWithHttpInfo(authtoken, authtokentype, requestedSets, dayStart, dayEnd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a \&quot;package\&quot; of multiple statistics in the order of their request. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="requestedSets">A list of statistics that should be returned. (optional)</param>
        /// <param name="dayStart">Day from which the data should be taken from. Default is 0. (optional, default to 0)</param>
        /// <param name="dayEnd">Day until which data is returned. Default is now. (optional, default to -1)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerWebControllersStatReturn&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerWebControllersStatReturn>>> StatsGetListAsyncWithHttpInfo (string authtoken, string authtokentype, List<string> requestedSets = null, double? dayStart = null, double? dayEnd = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGetList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGetList");

            var localVarPath = "/datasets/getlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestedSets != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "requestedSets", requestedSets)); // query parameter
            if (dayStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayStart", dayStart)); // query parameter
            if (dayEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dayEnd", dayEnd)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerWebControllersStatReturn>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerWebControllersStatReturn>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerWebControllersStatReturn>)));
        }

        /// <summary>
        /// /// Returns the timerange of the simulation, in days///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;float?&gt;</returns>
        public List<float?> StatsGetTimeRange (string authtoken, string authtokentype)
        {
             ApiResponse<List<float?>> localVarResponse = StatsGetTimeRangeWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// /// Returns the timerange of the simulation, in days///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;float?&gt;</returns>
        public ApiResponse< List<float?> > StatsGetTimeRangeWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGetTimeRange");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGetTimeRange");

            var localVarPath = "/datasets/timerange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetTimeRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<float?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<float?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<float?>)));
        }

        /// <summary>
        /// /// Returns the timerange of the simulation, in days///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;float?&gt;</returns>
        public async System.Threading.Tasks.Task<List<float?>> StatsGetTimeRangeAsync (string authtoken, string authtokentype)
        {
             ApiResponse<List<float?>> localVarResponse = await StatsGetTimeRangeAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// /// Returns the timerange of the simulation, in days///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;float?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<float?>>> StatsGetTimeRangeAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGetTimeRange");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGetTimeRange");

            var localVarPath = "/datasets/timerange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetTimeRange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<float?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<float?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<float?>)));
        }

        /// <summary>
        /// Returns all dataset keys, formatted as a tree. ///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>EcoStatsStatCategory</returns>
        public EcoStatsStatCategory StatsGetTreeList (string authtoken, string authtokentype)
        {
             ApiResponse<EcoStatsStatCategory> localVarResponse = StatsGetTreeListWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all dataset keys, formatted as a tree. ///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of EcoStatsStatCategory</returns>
        public ApiResponse< EcoStatsStatCategory > StatsGetTreeListWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGetTreeList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGetTreeList");

            var localVarPath = "/datasets/treelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetTreeList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcoStatsStatCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EcoStatsStatCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcoStatsStatCategory)));
        }

        /// <summary>
        /// Returns all dataset keys, formatted as a tree. ///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of EcoStatsStatCategory</returns>
        public async System.Threading.Tasks.Task<EcoStatsStatCategory> StatsGetTreeListAsync (string authtoken, string authtokentype)
        {
             ApiResponse<EcoStatsStatCategory> localVarResponse = await StatsGetTreeListAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all dataset keys, formatted as a tree. ///. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (EcoStatsStatCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EcoStatsStatCategory>> StatsGetTreeListAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGetTreeList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGetTreeList");

            var localVarPath = "/datasets/treelist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGetTreeList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcoStatsStatCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EcoStatsStatCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcoStatsStatCategory)));
        }

        /// <summary>
        /// Returns the list of premade graphs to be displayed on the front page. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;EcoStatsNamedGraph&gt;</returns>
        public List<EcoStatsNamedGraph> StatsGraphs (string authtoken, string authtokentype)
        {
             ApiResponse<List<EcoStatsNamedGraph>> localVarResponse = StatsGraphsWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of premade graphs to be displayed on the front page. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;EcoStatsNamedGraph&gt;</returns>
        public ApiResponse< List<EcoStatsNamedGraph> > StatsGraphsWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGraphs");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGraphs");

            var localVarPath = "/datasets/graphs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGraphs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoStatsNamedGraph>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoStatsNamedGraph>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoStatsNamedGraph>)));
        }

        /// <summary>
        /// Returns the list of premade graphs to be displayed on the front page. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;EcoStatsNamedGraph&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoStatsNamedGraph>> StatsGraphsAsync (string authtoken, string authtokentype)
        {
             ApiResponse<List<EcoStatsNamedGraph>> localVarResponse = await StatsGraphsAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of premade graphs to be displayed on the front page. 
        /// </summary>
        /// <exception cref="EcoServerAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;EcoStatsNamedGraph&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoStatsNamedGraph>>> StatsGraphsAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling StatsApi->StatsGraphs");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling StatsApi->StatsGraphs");

            var localVarPath = "/datasets/graphs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatsGraphs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoStatsNamedGraph>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoStatsNamedGraph>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoStatsNamedGraph>)));
        }

    }
}
