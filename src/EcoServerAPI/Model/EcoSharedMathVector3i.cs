/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServerAPI.Client.SwaggerDateConverter;

namespace EcoServerAPI.Model
{
    /// <summary>
    /// EcoSharedMathVector3i
    /// </summary>
    [DataContract]
    public partial class EcoSharedMathVector3i :  IEquatable<EcoSharedMathVector3i>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoSharedMathVector3i" /> class.
        /// </summary>
        /// <param name="x">x.</param>
        /// <param name="y">y.</param>
        /// <param name="z">z.</param>
        /// <param name="xz">xz.</param>
        /// <param name="normalized">normalized.</param>
        /// <param name="normalizedOrZero">normalizedOrZero.</param>
        public EcoSharedMathVector3i(int? x = default(int?), int? y = default(int?), int? z = default(int?), EcoSharedMathVector2i xz = default(EcoSharedMathVector2i), SystemNumericsVector3 normalized = default(SystemNumericsVector3), SystemNumericsVector3 normalizedOrZero = default(SystemNumericsVector3))
        {
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.Xz = xz;
            this.Normalized = normalized;
            this.NormalizedOrZero = normalizedOrZero;
        }
        
        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public int? X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public int? Y { get; set; }

        /// <summary>
        /// Gets or Sets Z
        /// </summary>
        [DataMember(Name="z", EmitDefaultValue=false)]
        public int? Z { get; set; }

        /// <summary>
        /// Gets or Sets Magnitude
        /// </summary>
        [DataMember(Name="magnitude", EmitDefaultValue=false)]
        public float? Magnitude { get; private set; }

        /// <summary>
        /// Gets or Sets SqrMagnitude
        /// </summary>
        [DataMember(Name="sqrMagnitude", EmitDefaultValue=false)]
        public int? SqrMagnitude { get; private set; }

        /// <summary>
        /// Gets or Sets MultTogether
        /// </summary>
        [DataMember(Name="multTogether", EmitDefaultValue=false)]
        public int? MultTogether { get; private set; }

        /// <summary>
        /// Gets or Sets Xz
        /// </summary>
        [DataMember(Name="xz", EmitDefaultValue=false)]
        public EcoSharedMathVector2i Xz { get; set; }

        /// <summary>
        /// Gets or Sets XzFullNeighborsAndSelf
        /// </summary>
        [DataMember(Name="xzFullNeighborsAndSelf", EmitDefaultValue=false)]
        public List<EcoSharedMathVector3i> XzFullNeighborsAndSelf { get; private set; }

        /// <summary>
        /// Gets or Sets XzNeighborsAndSelf
        /// </summary>
        [DataMember(Name="xzNeighborsAndSelf", EmitDefaultValue=false)]
        public List<EcoSharedMathVector3i> XzNeighborsAndSelf { get; private set; }

        /// <summary>
        /// Gets or Sets XzNeighborsAndDir
        /// </summary>
        [DataMember(Name="xzNeighborsAndDir", EmitDefaultValue=false)]
        public List<EcoSharedMathRay> XzNeighborsAndDir { get; private set; }

        /// <summary>
        /// Gets or Sets XzNeighbors
        /// </summary>
        [DataMember(Name="xzNeighbors", EmitDefaultValue=false)]
        public List<EcoSharedMathVector3i> XzNeighbors { get; private set; }

        /// <summary>
        /// Gets or Sets XzFullNeighbors
        /// </summary>
        [DataMember(Name="xzFullNeighbors", EmitDefaultValue=false)]
        public List<EcoSharedMathVector3i> XzFullNeighbors { get; private set; }

        /// <summary>
        /// Gets or Sets XyzNeighborsAndSelf
        /// </summary>
        [DataMember(Name="xyzNeighborsAndSelf", EmitDefaultValue=false)]
        public List<EcoSharedMathVector3i> XyzNeighborsAndSelf { get; private set; }

        /// <summary>
        /// Gets or Sets XyzNeighbors
        /// </summary>
        [DataMember(Name="xyzNeighbors", EmitDefaultValue=false)]
        public List<EcoSharedMathVector3i> XyzNeighbors { get; private set; }

        /// <summary>
        /// Gets or Sets Full26Neighbors
        /// </summary>
        [DataMember(Name="full26Neighbors", EmitDefaultValue=false)]
        public List<EcoSharedMathVector3i> Full26Neighbors { get; private set; }

        /// <summary>
        /// Gets or Sets Normalized
        /// </summary>
        [DataMember(Name="normalized", EmitDefaultValue=false)]
        public SystemNumericsVector3 Normalized { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedOrZero
        /// </summary>
        [DataMember(Name="normalizedOrZero", EmitDefaultValue=false)]
        public SystemNumericsVector3 NormalizedOrZero { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoSharedMathVector3i {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Z: ").Append(Z).Append("\n");
            sb.Append("  Magnitude: ").Append(Magnitude).Append("\n");
            sb.Append("  SqrMagnitude: ").Append(SqrMagnitude).Append("\n");
            sb.Append("  MultTogether: ").Append(MultTogether).Append("\n");
            sb.Append("  Xz: ").Append(Xz).Append("\n");
            sb.Append("  XzFullNeighborsAndSelf: ").Append(XzFullNeighborsAndSelf).Append("\n");
            sb.Append("  XzNeighborsAndSelf: ").Append(XzNeighborsAndSelf).Append("\n");
            sb.Append("  XzNeighborsAndDir: ").Append(XzNeighborsAndDir).Append("\n");
            sb.Append("  XzNeighbors: ").Append(XzNeighbors).Append("\n");
            sb.Append("  XzFullNeighbors: ").Append(XzFullNeighbors).Append("\n");
            sb.Append("  XyzNeighborsAndSelf: ").Append(XyzNeighborsAndSelf).Append("\n");
            sb.Append("  XyzNeighbors: ").Append(XyzNeighbors).Append("\n");
            sb.Append("  Full26Neighbors: ").Append(Full26Neighbors).Append("\n");
            sb.Append("  Normalized: ").Append(Normalized).Append("\n");
            sb.Append("  NormalizedOrZero: ").Append(NormalizedOrZero).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoSharedMathVector3i);
        }

        /// <summary>
        /// Returns true if EcoSharedMathVector3i instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoSharedMathVector3i to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoSharedMathVector3i input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Z == input.Z ||
                    (this.Z != null &&
                    this.Z.Equals(input.Z))
                ) && 
                (
                    this.Magnitude == input.Magnitude ||
                    (this.Magnitude != null &&
                    this.Magnitude.Equals(input.Magnitude))
                ) && 
                (
                    this.SqrMagnitude == input.SqrMagnitude ||
                    (this.SqrMagnitude != null &&
                    this.SqrMagnitude.Equals(input.SqrMagnitude))
                ) && 
                (
                    this.MultTogether == input.MultTogether ||
                    (this.MultTogether != null &&
                    this.MultTogether.Equals(input.MultTogether))
                ) && 
                (
                    this.Xz == input.Xz ||
                    (this.Xz != null &&
                    this.Xz.Equals(input.Xz))
                ) && 
                (
                    this.XzFullNeighborsAndSelf == input.XzFullNeighborsAndSelf ||
                    this.XzFullNeighborsAndSelf != null &&
                    this.XzFullNeighborsAndSelf.SequenceEqual(input.XzFullNeighborsAndSelf)
                ) && 
                (
                    this.XzNeighborsAndSelf == input.XzNeighborsAndSelf ||
                    this.XzNeighborsAndSelf != null &&
                    this.XzNeighborsAndSelf.SequenceEqual(input.XzNeighborsAndSelf)
                ) && 
                (
                    this.XzNeighborsAndDir == input.XzNeighborsAndDir ||
                    this.XzNeighborsAndDir != null &&
                    this.XzNeighborsAndDir.SequenceEqual(input.XzNeighborsAndDir)
                ) && 
                (
                    this.XzNeighbors == input.XzNeighbors ||
                    this.XzNeighbors != null &&
                    this.XzNeighbors.SequenceEqual(input.XzNeighbors)
                ) && 
                (
                    this.XzFullNeighbors == input.XzFullNeighbors ||
                    this.XzFullNeighbors != null &&
                    this.XzFullNeighbors.SequenceEqual(input.XzFullNeighbors)
                ) && 
                (
                    this.XyzNeighborsAndSelf == input.XyzNeighborsAndSelf ||
                    this.XyzNeighborsAndSelf != null &&
                    this.XyzNeighborsAndSelf.SequenceEqual(input.XyzNeighborsAndSelf)
                ) && 
                (
                    this.XyzNeighbors == input.XyzNeighbors ||
                    this.XyzNeighbors != null &&
                    this.XyzNeighbors.SequenceEqual(input.XyzNeighbors)
                ) && 
                (
                    this.Full26Neighbors == input.Full26Neighbors ||
                    this.Full26Neighbors != null &&
                    this.Full26Neighbors.SequenceEqual(input.Full26Neighbors)
                ) && 
                (
                    this.Normalized == input.Normalized ||
                    (this.Normalized != null &&
                    this.Normalized.Equals(input.Normalized))
                ) && 
                (
                    this.NormalizedOrZero == input.NormalizedOrZero ||
                    (this.NormalizedOrZero != null &&
                    this.NormalizedOrZero.Equals(input.NormalizedOrZero))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.Z != null)
                    hashCode = hashCode * 59 + this.Z.GetHashCode();
                if (this.Magnitude != null)
                    hashCode = hashCode * 59 + this.Magnitude.GetHashCode();
                if (this.SqrMagnitude != null)
                    hashCode = hashCode * 59 + this.SqrMagnitude.GetHashCode();
                if (this.MultTogether != null)
                    hashCode = hashCode * 59 + this.MultTogether.GetHashCode();
                if (this.Xz != null)
                    hashCode = hashCode * 59 + this.Xz.GetHashCode();
                if (this.XzFullNeighborsAndSelf != null)
                    hashCode = hashCode * 59 + this.XzFullNeighborsAndSelf.GetHashCode();
                if (this.XzNeighborsAndSelf != null)
                    hashCode = hashCode * 59 + this.XzNeighborsAndSelf.GetHashCode();
                if (this.XzNeighborsAndDir != null)
                    hashCode = hashCode * 59 + this.XzNeighborsAndDir.GetHashCode();
                if (this.XzNeighbors != null)
                    hashCode = hashCode * 59 + this.XzNeighbors.GetHashCode();
                if (this.XzFullNeighbors != null)
                    hashCode = hashCode * 59 + this.XzFullNeighbors.GetHashCode();
                if (this.XyzNeighborsAndSelf != null)
                    hashCode = hashCode * 59 + this.XyzNeighborsAndSelf.GetHashCode();
                if (this.XyzNeighbors != null)
                    hashCode = hashCode * 59 + this.XyzNeighbors.GetHashCode();
                if (this.Full26Neighbors != null)
                    hashCode = hashCode * 59 + this.Full26Neighbors.GetHashCode();
                if (this.Normalized != null)
                    hashCode = hashCode * 59 + this.Normalized.GetHashCode();
                if (this.NormalizedOrZero != null)
                    hashCode = hashCode * 59 + this.NormalizedOrZero.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
