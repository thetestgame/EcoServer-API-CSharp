/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServerAPI.Client.SwaggerDateConverter;

namespace EcoServerAPI.Model
{
    /// <summary>
    /// EcoWebServerDataTransferObjectsCivicActionDTO
    /// </summary>
    [DataContract]
    public partial class EcoWebServerDataTransferObjectsCivicActionDTO :  IEquatable<EcoWebServerDataTransferObjectsCivicActionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoWebServerDataTransferObjectsCivicActionDTO" /> class.
        /// </summary>
        /// <param name="actionOnComplete">actionOnComplete.</param>
        /// <param name="actionOnCompleteTableHeader">actionOnCompleteTableHeader.</param>
        /// <param name="actionOnCompleteTable">actionOnCompleteTable.</param>
        /// <param name="actionOnCompleteFullDescription">actionOnCompleteFullDescription.</param>
        /// <param name="districtMapBefore">districtMapBefore.</param>
        /// <param name="districtMapAfter">districtMapAfter.</param>
        public EcoWebServerDataTransferObjectsCivicActionDTO(string actionOnComplete = default(string), string actionOnCompleteTableHeader = default(string), List<Object> actionOnCompleteTable = default(List<Object>), string actionOnCompleteFullDescription = default(string), EcoWebServerDataTransferObjectsMapDTO districtMapBefore = default(EcoWebServerDataTransferObjectsMapDTO), EcoWebServerDataTransferObjectsMapDTO districtMapAfter = default(EcoWebServerDataTransferObjectsMapDTO))
        {
            this.ActionOnComplete = actionOnComplete;
            this.ActionOnCompleteTableHeader = actionOnCompleteTableHeader;
            this.ActionOnCompleteTable = actionOnCompleteTable;
            this.ActionOnCompleteFullDescription = actionOnCompleteFullDescription;
            this.DistrictMapBefore = districtMapBefore;
            this.DistrictMapAfter = districtMapAfter;
        }
        
        /// <summary>
        /// Gets or Sets ActionOnComplete
        /// </summary>
        [DataMember(Name="actionOnComplete", EmitDefaultValue=false)]
        public string ActionOnComplete { get; set; }

        /// <summary>
        /// Gets or Sets ActionOnCompleteTableHeader
        /// </summary>
        [DataMember(Name="actionOnCompleteTableHeader", EmitDefaultValue=false)]
        public string ActionOnCompleteTableHeader { get; set; }

        /// <summary>
        /// Gets or Sets ActionOnCompleteTable
        /// </summary>
        [DataMember(Name="actionOnCompleteTable", EmitDefaultValue=false)]
        public List<Object> ActionOnCompleteTable { get; set; }

        /// <summary>
        /// Gets or Sets ActionOnCompleteFullDescription
        /// </summary>
        [DataMember(Name="actionOnCompleteFullDescription", EmitDefaultValue=false)]
        public string ActionOnCompleteFullDescription { get; set; }

        /// <summary>
        /// Gets or Sets DistrictMapBefore
        /// </summary>
        [DataMember(Name="districtMapBefore", EmitDefaultValue=false)]
        public EcoWebServerDataTransferObjectsMapDTO DistrictMapBefore { get; set; }

        /// <summary>
        /// Gets or Sets DistrictMapAfter
        /// </summary>
        [DataMember(Name="districtMapAfter", EmitDefaultValue=false)]
        public EcoWebServerDataTransferObjectsMapDTO DistrictMapAfter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoWebServerDataTransferObjectsCivicActionDTO {\n");
            sb.Append("  ActionOnComplete: ").Append(ActionOnComplete).Append("\n");
            sb.Append("  ActionOnCompleteTableHeader: ").Append(ActionOnCompleteTableHeader).Append("\n");
            sb.Append("  ActionOnCompleteTable: ").Append(ActionOnCompleteTable).Append("\n");
            sb.Append("  ActionOnCompleteFullDescription: ").Append(ActionOnCompleteFullDescription).Append("\n");
            sb.Append("  DistrictMapBefore: ").Append(DistrictMapBefore).Append("\n");
            sb.Append("  DistrictMapAfter: ").Append(DistrictMapAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoWebServerDataTransferObjectsCivicActionDTO);
        }

        /// <summary>
        /// Returns true if EcoWebServerDataTransferObjectsCivicActionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoWebServerDataTransferObjectsCivicActionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoWebServerDataTransferObjectsCivicActionDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionOnComplete == input.ActionOnComplete ||
                    (this.ActionOnComplete != null &&
                    this.ActionOnComplete.Equals(input.ActionOnComplete))
                ) && 
                (
                    this.ActionOnCompleteTableHeader == input.ActionOnCompleteTableHeader ||
                    (this.ActionOnCompleteTableHeader != null &&
                    this.ActionOnCompleteTableHeader.Equals(input.ActionOnCompleteTableHeader))
                ) && 
                (
                    this.ActionOnCompleteTable == input.ActionOnCompleteTable ||
                    this.ActionOnCompleteTable != null &&
                    this.ActionOnCompleteTable.SequenceEqual(input.ActionOnCompleteTable)
                ) && 
                (
                    this.ActionOnCompleteFullDescription == input.ActionOnCompleteFullDescription ||
                    (this.ActionOnCompleteFullDescription != null &&
                    this.ActionOnCompleteFullDescription.Equals(input.ActionOnCompleteFullDescription))
                ) && 
                (
                    this.DistrictMapBefore == input.DistrictMapBefore ||
                    (this.DistrictMapBefore != null &&
                    this.DistrictMapBefore.Equals(input.DistrictMapBefore))
                ) && 
                (
                    this.DistrictMapAfter == input.DistrictMapAfter ||
                    (this.DistrictMapAfter != null &&
                    this.DistrictMapAfter.Equals(input.DistrictMapAfter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionOnComplete != null)
                    hashCode = hashCode * 59 + this.ActionOnComplete.GetHashCode();
                if (this.ActionOnCompleteTableHeader != null)
                    hashCode = hashCode * 59 + this.ActionOnCompleteTableHeader.GetHashCode();
                if (this.ActionOnCompleteTable != null)
                    hashCode = hashCode * 59 + this.ActionOnCompleteTable.GetHashCode();
                if (this.ActionOnCompleteFullDescription != null)
                    hashCode = hashCode * 59 + this.ActionOnCompleteFullDescription.GetHashCode();
                if (this.DistrictMapBefore != null)
                    hashCode = hashCode * 59 + this.DistrictMapBefore.GetHashCode();
                if (this.DistrictMapAfter != null)
                    hashCode = hashCode * 59 + this.DistrictMapAfter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
