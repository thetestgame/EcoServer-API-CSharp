/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServerAPI.Client.SwaggerDateConverter;

namespace EcoServerAPI.Model
{
    /// <summary>
    /// EcoWebServerDataTransferObjectsDistrictMapDTO
    /// </summary>
    [DataContract]
    public partial class EcoWebServerDataTransferObjectsDistrictMapDTO :  IEquatable<EcoWebServerDataTransferObjectsDistrictMapDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoWebServerDataTransferObjectsDistrictMapDTO" /> class.
        /// </summary>
        /// <param name="districtMetadata">districtMetadata.</param>
        /// <param name="districtMap">districtMap.</param>
        public EcoWebServerDataTransferObjectsDistrictMapDTO(List<EcoWebServerDataTransferObjectsDistrictDTO> districtMetadata = default(List<EcoWebServerDataTransferObjectsDistrictDTO>), string districtMap = default(string))
        {
            this.DistrictMetadata = districtMetadata;
            this.DistrictMap = districtMap;
        }
        
        /// <summary>
        /// Gets or Sets DistrictMetadata
        /// </summary>
        [DataMember(Name="districtMetadata", EmitDefaultValue=false)]
        public List<EcoWebServerDataTransferObjectsDistrictDTO> DistrictMetadata { get; set; }

        /// <summary>
        /// Gets or Sets DistrictMap
        /// </summary>
        [DataMember(Name="districtMap", EmitDefaultValue=false)]
        public string DistrictMap { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoWebServerDataTransferObjectsDistrictMapDTO {\n");
            sb.Append("  DistrictMetadata: ").Append(DistrictMetadata).Append("\n");
            sb.Append("  DistrictMap: ").Append(DistrictMap).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoWebServerDataTransferObjectsDistrictMapDTO);
        }

        /// <summary>
        /// Returns true if EcoWebServerDataTransferObjectsDistrictMapDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoWebServerDataTransferObjectsDistrictMapDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoWebServerDataTransferObjectsDistrictMapDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DistrictMetadata == input.DistrictMetadata ||
                    this.DistrictMetadata != null &&
                    this.DistrictMetadata.SequenceEqual(input.DistrictMetadata)
                ) && 
                (
                    this.DistrictMap == input.DistrictMap ||
                    (this.DistrictMap != null &&
                    this.DistrictMap.Equals(input.DistrictMap))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DistrictMetadata != null)
                    hashCode = hashCode * 59 + this.DistrictMetadata.GetHashCode();
                if (this.DistrictMap != null)
                    hashCode = hashCode * 59 + this.DistrictMap.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
