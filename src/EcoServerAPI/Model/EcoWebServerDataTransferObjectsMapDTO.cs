/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServerAPI.Client.SwaggerDateConverter;

namespace EcoServerAPI.Model
{
    /// <summary>
    /// EcoWebServerDataTransferObjectsMapDTO
    /// </summary>
    [DataContract]
    public partial class EcoWebServerDataTransferObjectsMapDTO :  IEquatable<EcoWebServerDataTransferObjectsMapDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoWebServerDataTransferObjectsMapDTO" /> class.
        /// </summary>
        /// <param name="layerSelected">layerSelected.</param>
        /// <param name="frame">frame.</param>
        /// <param name="timeStart">timeStart.</param>
        /// <param name="timeEnd">timeEnd.</param>
        /// <param name="playSpeed">playSpeed.</param>
        /// <param name="currentTime">currentTime.</param>
        /// <param name="flat">flat.</param>
        /// <param name="pause">pause.</param>
        /// <param name="camPos">camPos.</param>
        public EcoWebServerDataTransferObjectsMapDTO(string layerSelected = default(string), int? frame = default(int?), double? timeStart = default(double?), double? timeEnd = default(double?), double? playSpeed = default(double?), double? currentTime = default(double?), bool? flat = default(bool?), bool? pause = default(bool?), EcoWebServerDataTransferObjectsVector3DTO camPos = default(EcoWebServerDataTransferObjectsVector3DTO))
        {
            this.LayerSelected = layerSelected;
            this.Frame = frame;
            this.TimeStart = timeStart;
            this.TimeEnd = timeEnd;
            this.PlaySpeed = playSpeed;
            this.CurrentTime = currentTime;
            this.Flat = flat;
            this.Pause = pause;
            this.CamPos = camPos;
        }
        
        /// <summary>
        /// Gets or Sets LayerSelected
        /// </summary>
        [DataMember(Name="layerSelected", EmitDefaultValue=false)]
        public string LayerSelected { get; set; }

        /// <summary>
        /// Gets or Sets Frame
        /// </summary>
        [DataMember(Name="frame", EmitDefaultValue=false)]
        public int? Frame { get; set; }

        /// <summary>
        /// Gets or Sets TimeStart
        /// </summary>
        [DataMember(Name="timeStart", EmitDefaultValue=false)]
        public double? TimeStart { get; set; }

        /// <summary>
        /// Gets or Sets TimeEnd
        /// </summary>
        [DataMember(Name="timeEnd", EmitDefaultValue=false)]
        public double? TimeEnd { get; set; }

        /// <summary>
        /// Gets or Sets PlaySpeed
        /// </summary>
        [DataMember(Name="playSpeed", EmitDefaultValue=false)]
        public double? PlaySpeed { get; set; }

        /// <summary>
        /// Gets or Sets CurrentTime
        /// </summary>
        [DataMember(Name="currentTime", EmitDefaultValue=false)]
        public double? CurrentTime { get; set; }

        /// <summary>
        /// Gets or Sets Flat
        /// </summary>
        [DataMember(Name="flat", EmitDefaultValue=false)]
        public bool? Flat { get; set; }

        /// <summary>
        /// Gets or Sets Pause
        /// </summary>
        [DataMember(Name="pause", EmitDefaultValue=false)]
        public bool? Pause { get; set; }

        /// <summary>
        /// Gets or Sets CamPos
        /// </summary>
        [DataMember(Name="camPos", EmitDefaultValue=false)]
        public EcoWebServerDataTransferObjectsVector3DTO CamPos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoWebServerDataTransferObjectsMapDTO {\n");
            sb.Append("  LayerSelected: ").Append(LayerSelected).Append("\n");
            sb.Append("  Frame: ").Append(Frame).Append("\n");
            sb.Append("  TimeStart: ").Append(TimeStart).Append("\n");
            sb.Append("  TimeEnd: ").Append(TimeEnd).Append("\n");
            sb.Append("  PlaySpeed: ").Append(PlaySpeed).Append("\n");
            sb.Append("  CurrentTime: ").Append(CurrentTime).Append("\n");
            sb.Append("  Flat: ").Append(Flat).Append("\n");
            sb.Append("  Pause: ").Append(Pause).Append("\n");
            sb.Append("  CamPos: ").Append(CamPos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoWebServerDataTransferObjectsMapDTO);
        }

        /// <summary>
        /// Returns true if EcoWebServerDataTransferObjectsMapDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoWebServerDataTransferObjectsMapDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoWebServerDataTransferObjectsMapDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LayerSelected == input.LayerSelected ||
                    (this.LayerSelected != null &&
                    this.LayerSelected.Equals(input.LayerSelected))
                ) && 
                (
                    this.Frame == input.Frame ||
                    (this.Frame != null &&
                    this.Frame.Equals(input.Frame))
                ) && 
                (
                    this.TimeStart == input.TimeStart ||
                    (this.TimeStart != null &&
                    this.TimeStart.Equals(input.TimeStart))
                ) && 
                (
                    this.TimeEnd == input.TimeEnd ||
                    (this.TimeEnd != null &&
                    this.TimeEnd.Equals(input.TimeEnd))
                ) && 
                (
                    this.PlaySpeed == input.PlaySpeed ||
                    (this.PlaySpeed != null &&
                    this.PlaySpeed.Equals(input.PlaySpeed))
                ) && 
                (
                    this.CurrentTime == input.CurrentTime ||
                    (this.CurrentTime != null &&
                    this.CurrentTime.Equals(input.CurrentTime))
                ) && 
                (
                    this.Flat == input.Flat ||
                    (this.Flat != null &&
                    this.Flat.Equals(input.Flat))
                ) && 
                (
                    this.Pause == input.Pause ||
                    (this.Pause != null &&
                    this.Pause.Equals(input.Pause))
                ) && 
                (
                    this.CamPos == input.CamPos ||
                    (this.CamPos != null &&
                    this.CamPos.Equals(input.CamPos))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LayerSelected != null)
                    hashCode = hashCode * 59 + this.LayerSelected.GetHashCode();
                if (this.Frame != null)
                    hashCode = hashCode * 59 + this.Frame.GetHashCode();
                if (this.TimeStart != null)
                    hashCode = hashCode * 59 + this.TimeStart.GetHashCode();
                if (this.TimeEnd != null)
                    hashCode = hashCode * 59 + this.TimeEnd.GetHashCode();
                if (this.PlaySpeed != null)
                    hashCode = hashCode * 59 + this.PlaySpeed.GetHashCode();
                if (this.CurrentTime != null)
                    hashCode = hashCode * 59 + this.CurrentTime.GetHashCode();
                if (this.Flat != null)
                    hashCode = hashCode * 59 + this.Flat.GetHashCode();
                if (this.Pause != null)
                    hashCode = hashCode * 59 + this.Pause.GetHashCode();
                if (this.CamPos != null)
                    hashCode = hashCode * 59 + this.CamPos.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
