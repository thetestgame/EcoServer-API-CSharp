/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using EcoServerAPI.Client;
using EcoServerAPI.Api;
using EcoServerAPI.Model;

namespace EcoServerAPI.Test
{
    /// <summary>
    ///  Class for testing WorldLayerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class WorldLayerApiTests
    {
        private WorldLayerApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new WorldLayerApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of WorldLayerApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WorldLayerApi
            //Assert.IsInstanceOfType(typeof(WorldLayerApi), instance, "instance is a WorldLayerApi");
        }

        
        /// <summary>
        /// Test WorldLayerAreaDescription
        /// </summary>
        [Test]
        public void WorldLayerAreaDescriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //float? minX = null;
            //float? minY = null;
            //float? maxX = null;
            //float? maxY = null;
            //var response = instance.WorldLayerAreaDescription(authtoken, authtokentype, minX, minY, maxX, maxY);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test WorldLayerListLayers
        /// </summary>
        [Test]
        public void WorldLayerListLayersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //var response = instance.WorldLayerListLayers(authtoken, authtokentype);
            //Assert.IsInstanceOf<List<EcoWebServerDataTransferObjectsWorldLayersWorldLayerGroupDTO>> (response, "response is List<EcoWebServerDataTransferObjectsWorldLayersWorldLayerGroupDTO>");
        }
        
        /// <summary>
        /// Test WorldLayerListRelevantLayers
        /// </summary>
        [Test]
        public void WorldLayerListRelevantLayersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string focusLayer = null;
            //string authtoken = null;
            //string authtokentype = null;
            //float? minX = null;
            //float? minY = null;
            //float? maxX = null;
            //float? maxY = null;
            //var response = instance.WorldLayerListRelevantLayers(focusLayer, authtoken, authtokentype, minX, minY, maxX, maxY);
            //Assert.IsInstanceOf<List<EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO>> (response, "response is List<EcoWebServerDataTransferObjectsWorldLayersWorldLayerDTO>");
        }
        
        /// <summary>
        /// Test WorldLayerListRelevantRelationships
        /// </summary>
        [Test]
        public void WorldLayerListRelevantRelationshipsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string focusLayer = null;
            //string authtoken = null;
            //string authtokentype = null;
            //float? minX = null;
            //float? minY = null;
            //float? maxX = null;
            //float? maxY = null;
            //var response = instance.WorldLayerListRelevantRelationships(focusLayer, authtoken, authtokentype, minX, minY, maxX, maxY);
            //Assert.IsInstanceOf<List<EcoWebServerDataTransferObjectsWorldLayersLayerRelationshipDTO>> (response, "response is List<EcoWebServerDataTransferObjectsWorldLayersLayerRelationshipDTO>");
        }
        
    }

}
