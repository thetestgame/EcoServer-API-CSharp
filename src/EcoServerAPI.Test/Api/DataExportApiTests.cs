/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using EcoServerAPI.Client;
using EcoServerAPI.Api;

namespace EcoServerAPI.Test
{
    /// <summary>
    ///  Class for testing DataExportApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DataExportApiTests
    {
        private DataExportApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DataExportApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DataExportApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DataExportApi
            //Assert.IsInstanceOfType(typeof(DataExportApi), instance, "instance is a DataExportApi");
        }

        
        /// <summary>
        /// Test DataExportGetActionList
        /// </summary>
        [Test]
        public void DataExportGetActionListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //var response = instance.DataExportGetActionList(authtoken, authtokentype);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DataExportGetEnvironmentList
        /// </summary>
        [Test]
        public void DataExportGetEnvironmentListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //var response = instance.DataExportGetEnvironmentList(authtoken, authtokentype);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DataExportGetExportAction
        /// </summary>
        [Test]
        public void DataExportGetExportActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //string actionName = null;
            //var response = instance.DataExportGetExportAction(authtoken, authtokentype, actionName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DataExportGetExportEnvironment
        /// </summary>
        [Test]
        public void DataExportGetExportEnvironmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //string category = null;
            //string units = null;
            //string column = null;
            //var response = instance.DataExportGetExportEnvironment(authtoken, authtokentype, category, units, column);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DataExportGetExportSpecies
        /// </summary>
        [Test]
        public void DataExportGetExportSpeciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //string speciesName = null;
            //var response = instance.DataExportGetExportSpecies(authtoken, authtokentype, speciesName);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DataExportGetSpeciesList
        /// </summary>
        [Test]
        public void DataExportGetSpeciesListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //var response = instance.DataExportGetSpeciesList(authtoken, authtokentype);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test DataExportPostExportActions
        /// </summary>
        [Test]
        public void DataExportPostExportActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //instance.DataExportPostExportActions(authtoken, authtokentype);
            
        }
        
        /// <summary>
        /// Test DataExportPostExportAll
        /// </summary>
        [Test]
        public void DataExportPostExportAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //instance.DataExportPostExportAll(authtoken, authtokentype);
            
        }
        
        /// <summary>
        /// Test DataExportPostExportChat
        /// </summary>
        [Test]
        public void DataExportPostExportChatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //instance.DataExportPostExportChat(authtoken, authtokentype);
            
        }
        
        /// <summary>
        /// Test DataExportPostExportEnvironment
        /// </summary>
        [Test]
        public void DataExportPostExportEnvironmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //instance.DataExportPostExportEnvironment(authtoken, authtokentype);
            
        }
        
        /// <summary>
        /// Test DataExportPostExportSpecies
        /// </summary>
        [Test]
        public void DataExportPostExportSpeciesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //instance.DataExportPostExportSpecies(authtoken, authtokentype);
            
        }
        
    }

}
