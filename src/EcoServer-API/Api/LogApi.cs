/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EcoServer-API.Client;

namespace EcoServer-API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves a list of all log files on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> LogGetAllLogs (string authtoken, string authtokentype);

        /// <summary>
        /// Retrieves a list of all log files on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> LogGetAllLogsWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Retrieves a list of all log files in the requested category subfolder if it exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Category log subfolder to search.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> LogGetCategoryLogs (string category, string authtoken, string authtokentype);

        /// <summary>
        /// Retrieves a list of all log files in the requested category subfolder if it exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Category log subfolder to search.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> LogGetCategoryLogsWithHttpInfo (string category, string authtoken, string authtokentype);
        /// <summary>
        /// Streams a log file over HTTP/HTTPS to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="filepath">Filepath of the log file to stream. (optional)</param>
        /// <returns></returns>
        void LogGetLogFile (string authtoken, string authtokentype, string filepath = null);

        /// <summary>
        /// Streams a log file over HTTP/HTTPS to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="filepath">Filepath of the log file to stream. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogGetLogFileWithHttpInfo (string authtoken, string authtokentype, string filepath = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves a list of all log files on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> LogGetAllLogsAsync (string authtoken, string authtokentype);

        /// <summary>
        /// Retrieves a list of all log files on the server.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> LogGetAllLogsAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Retrieves a list of all log files in the requested category subfolder if it exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Category log subfolder to search.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> LogGetCategoryLogsAsync (string category, string authtoken, string authtokentype);

        /// <summary>
        /// Retrieves a list of all log files in the requested category subfolder if it exists.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Category log subfolder to search.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> LogGetCategoryLogsAsyncWithHttpInfo (string category, string authtoken, string authtokentype);
        /// <summary>
        /// Streams a log file over HTTP/HTTPS to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="filepath">Filepath of the log file to stream. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogGetLogFileAsync (string authtoken, string authtokentype, string filepath = null);

        /// <summary>
        /// Streams a log file over HTTP/HTTPS to a client.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="filepath">Filepath of the log file to stream. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogGetLogFileAsyncWithHttpInfo (string authtoken, string authtokentype, string filepath = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LogApi : ILogApi
    {
        private EcoServer-API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogApi(String basePath)
        {
            this.Configuration = new EcoServer-API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EcoServer-API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LogApi(EcoServer-API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EcoServer-API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EcoServer-API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EcoServer-API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EcoServer-API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retrieves a list of all log files on the server. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> LogGetAllLogs (string authtoken, string authtokentype)
        {
             ApiResponse<List<string>> localVarResponse = LogGetAllLogsWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all log files on the server. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > LogGetAllLogsWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LogApi->LogGetAllLogs");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LogApi->LogGetAllLogs");

            var localVarPath = "/api/v1/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogGetAllLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Retrieves a list of all log files on the server. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> LogGetAllLogsAsync (string authtoken, string authtokentype)
        {
             ApiResponse<List<string>> localVarResponse = await LogGetAllLogsAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a list of all log files on the server. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> LogGetAllLogsAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LogApi->LogGetAllLogs");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LogApi->LogGetAllLogs");

            var localVarPath = "/api/v1/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogGetAllLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Retrieves a list of all log files in the requested category subfolder if it exists. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Category log subfolder to search.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> LogGetCategoryLogs (string category, string authtoken, string authtokentype)
        {
             ApiResponse<List<string>> localVarResponse = LogGetCategoryLogsWithHttpInfo(category, authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of all log files in the requested category subfolder if it exists. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Category log subfolder to search.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > LogGetCategoryLogsWithHttpInfo (string category, string authtoken, string authtokentype)
        {
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling LogApi->LogGetCategoryLogs");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LogApi->LogGetCategoryLogs");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LogApi->LogGetCategoryLogs");

            var localVarPath = "/api/v1/logs/{category}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (category != null) localVarPathParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogGetCategoryLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Retrieves a list of all log files in the requested category subfolder if it exists. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Category log subfolder to search.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> LogGetCategoryLogsAsync (string category, string authtoken, string authtokentype)
        {
             ApiResponse<List<string>> localVarResponse = await LogGetCategoryLogsAsyncWithHttpInfo(category, authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieves a list of all log files in the requested category subfolder if it exists. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="category">Category log subfolder to search.</param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> LogGetCategoryLogsAsyncWithHttpInfo (string category, string authtoken, string authtokentype)
        {
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling LogApi->LogGetCategoryLogs");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LogApi->LogGetCategoryLogs");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LogApi->LogGetCategoryLogs");

            var localVarPath = "/api/v1/logs/{category}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (category != null) localVarPathParams.Add("category", this.Configuration.ApiClient.ParameterToString(category)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogGetCategoryLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Streams a log file over HTTP/HTTPS to a client. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="filepath">Filepath of the log file to stream. (optional)</param>
        /// <returns></returns>
        public void LogGetLogFile (string authtoken, string authtokentype, string filepath = null)
        {
             LogGetLogFileWithHttpInfo(authtoken, authtokentype, filepath);
        }

        /// <summary>
        /// Streams a log file over HTTP/HTTPS to a client. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="filepath">Filepath of the log file to stream. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LogGetLogFileWithHttpInfo (string authtoken, string authtokentype, string filepath = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LogApi->LogGetLogFile");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LogApi->LogGetLogFile");

            var localVarPath = "/api/v1/logs/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filepath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filepath", filepath)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogGetLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Streams a log file over HTTP/HTTPS to a client. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="filepath">Filepath of the log file to stream. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogGetLogFileAsync (string authtoken, string authtokentype, string filepath = null)
        {
             await LogGetLogFileAsyncWithHttpInfo(authtoken, authtokentype, filepath);

        }

        /// <summary>
        /// Streams a log file over HTTP/HTTPS to a client. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="filepath">Filepath of the log file to stream. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LogGetLogFileAsyncWithHttpInfo (string authtoken, string authtokentype, string filepath = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LogApi->LogGetLogFile");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LogApi->LogGetLogFile");

            var localVarPath = "/api/v1/logs/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filepath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filepath", filepath)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogGetLogFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
