/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EcoServer-API.Client;
using EcoServer-API.Model;

namespace EcoServer-API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILawApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Genereate test laws.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a DevTier user.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void LawGenerateTestData (string authtoken, string authtokentype);

        /// <summary>
        /// Genereate test laws.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a DevTier user.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LawGenerateTestDataWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>EcoWebServerDataTransferObjectsDistrictMapDTO</returns>
        EcoWebServerDataTransferObjectsDistrictMapDTO LawGetDistrictMap (string name, string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of EcoWebServerDataTransferObjectsDistrictMapDTO</returns>
        ApiResponse<EcoWebServerDataTransferObjectsDistrictMapDTO> LawGetDistrictMapWithHttpInfo (string name, string authtoken, string authtokentype);
        /// <summary>
        /// Returns the law with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>EcoWebServerDataTransferObjectsLawDTO</returns>
        EcoWebServerDataTransferObjectsLawDTO LawGetLaw (int? id, string authtoken, string authtokentype);

        /// <summary>
        /// Returns the law with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of EcoWebServerDataTransferObjectsLawDTO</returns>
        ApiResponse<EcoWebServerDataTransferObjectsLawDTO> LawGetLawWithHttpInfo (int? id, string authtoken, string authtokentype);
        /// <summary>
        /// Returns all laws currently present in the game in the specified states, active by default.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        List<EcoWebServerDataTransferObjectsLawDTO> LawList (string states, string authtoken, string authtokentype);

        /// <summary>
        /// Returns all laws currently present in the game in the specified states, active by default.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>> LawListWithHttpInfo (string states, string authtoken, string authtokentype);
        /// <summary>
        /// Returns all laws currently present in the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        List<EcoWebServerDataTransferObjectsLawDTO> LawListAll (string authtoken, string authtokentype);

        /// <summary>
        /// Returns all laws currently present in the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>> LawListAllWithHttpInfo (string authtoken, string authtokentype);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Genereate test laws.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a DevTier user.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LawGenerateTestDataAsync (string authtoken, string authtokentype);

        /// <summary>
        /// Genereate test laws.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a DevTier user.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LawGenerateTestDataAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of EcoWebServerDataTransferObjectsDistrictMapDTO</returns>
        System.Threading.Tasks.Task<EcoWebServerDataTransferObjectsDistrictMapDTO> LawGetDistrictMapAsync (string name, string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (EcoWebServerDataTransferObjectsDistrictMapDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EcoWebServerDataTransferObjectsDistrictMapDTO>> LawGetDistrictMapAsyncWithHttpInfo (string name, string authtoken, string authtokentype);
        /// <summary>
        /// Returns the law with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of EcoWebServerDataTransferObjectsLawDTO</returns>
        System.Threading.Tasks.Task<EcoWebServerDataTransferObjectsLawDTO> LawGetLawAsync (int? id, string authtoken, string authtokentype);

        /// <summary>
        /// Returns the law with the specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (EcoWebServerDataTransferObjectsLawDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<EcoWebServerDataTransferObjectsLawDTO>> LawGetLawAsyncWithHttpInfo (int? id, string authtoken, string authtokentype);
        /// <summary>
        /// Returns all laws currently present in the game in the specified states, active by default.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsLawDTO>> LawListAsync (string states, string authtoken, string authtokentype);

        /// <summary>
        /// Returns all laws currently present in the game in the specified states, active by default.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>>> LawListAsyncWithHttpInfo (string states, string authtoken, string authtokentype);
        /// <summary>
        /// Returns all laws currently present in the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsLawDTO>> LawListAllAsync (string authtoken, string authtokentype);

        /// <summary>
        /// Returns all laws currently present in the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>>> LawListAllAsyncWithHttpInfo (string authtoken, string authtokentype);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LawApi : ILawApi
    {
        private EcoServer-API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LawApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LawApi(String basePath)
        {
            this.Configuration = new EcoServer-API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EcoServer-API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LawApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LawApi(EcoServer-API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EcoServer-API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EcoServer-API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EcoServer-API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EcoServer-API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Genereate test laws. &gt; This endpoint can only be invoked by a DevTier user.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void LawGenerateTestData (string authtoken, string authtokentype)
        {
             LawGenerateTestDataWithHttpInfo(authtoken, authtokentype);
        }

        /// <summary>
        /// Genereate test laws. &gt; This endpoint can only be invoked by a DevTier user.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LawGenerateTestDataWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawGenerateTestData");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawGenerateTestData");

            var localVarPath = "/api/v1/laws/generatetestdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawGenerateTestData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Genereate test laws. &gt; This endpoint can only be invoked by a DevTier user.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LawGenerateTestDataAsync (string authtoken, string authtokentype)
        {
             await LawGenerateTestDataAsyncWithHttpInfo(authtoken, authtokentype);

        }

        /// <summary>
        /// Genereate test laws. &gt; This endpoint can only be invoked by a DevTier user.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LawGenerateTestDataAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawGenerateTestData");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawGenerateTestData");

            var localVarPath = "/api/v1/laws/generatetestdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawGenerateTestData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>EcoWebServerDataTransferObjectsDistrictMapDTO</returns>
        public EcoWebServerDataTransferObjectsDistrictMapDTO LawGetDistrictMap (string name, string authtoken, string authtokentype)
        {
             ApiResponse<EcoWebServerDataTransferObjectsDistrictMapDTO> localVarResponse = LawGetDistrictMapWithHttpInfo(name, authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of EcoWebServerDataTransferObjectsDistrictMapDTO</returns>
        public ApiResponse< EcoWebServerDataTransferObjectsDistrictMapDTO > LawGetDistrictMapWithHttpInfo (string name, string authtoken, string authtokentype)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling LawApi->LawGetDistrictMap");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawGetDistrictMap");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawGetDistrictMap");

            var localVarPath = "/api/v1/laws/districtmap/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawGetDistrictMap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcoWebServerDataTransferObjectsDistrictMapDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EcoWebServerDataTransferObjectsDistrictMapDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcoWebServerDataTransferObjectsDistrictMapDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of EcoWebServerDataTransferObjectsDistrictMapDTO</returns>
        public async System.Threading.Tasks.Task<EcoWebServerDataTransferObjectsDistrictMapDTO> LawGetDistrictMapAsync (string name, string authtoken, string authtokentype)
        {
             ApiResponse<EcoWebServerDataTransferObjectsDistrictMapDTO> localVarResponse = await LawGetDistrictMapAsyncWithHttpInfo(name, authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (EcoWebServerDataTransferObjectsDistrictMapDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EcoWebServerDataTransferObjectsDistrictMapDTO>> LawGetDistrictMapAsyncWithHttpInfo (string name, string authtoken, string authtokentype)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling LawApi->LawGetDistrictMap");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawGetDistrictMap");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawGetDistrictMap");

            var localVarPath = "/api/v1/laws/districtmap/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawGetDistrictMap", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcoWebServerDataTransferObjectsDistrictMapDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EcoWebServerDataTransferObjectsDistrictMapDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcoWebServerDataTransferObjectsDistrictMapDTO)));
        }

        /// <summary>
        /// Returns the law with the specified id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>EcoWebServerDataTransferObjectsLawDTO</returns>
        public EcoWebServerDataTransferObjectsLawDTO LawGetLaw (int? id, string authtoken, string authtokentype)
        {
             ApiResponse<EcoWebServerDataTransferObjectsLawDTO> localVarResponse = LawGetLawWithHttpInfo(id, authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the law with the specified id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of EcoWebServerDataTransferObjectsLawDTO</returns>
        public ApiResponse< EcoWebServerDataTransferObjectsLawDTO > LawGetLawWithHttpInfo (int? id, string authtoken, string authtokentype)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LawApi->LawGetLaw");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawGetLaw");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawGetLaw");

            var localVarPath = "/api/v1/laws/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawGetLaw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcoWebServerDataTransferObjectsLawDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EcoWebServerDataTransferObjectsLawDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcoWebServerDataTransferObjectsLawDTO)));
        }

        /// <summary>
        /// Returns the law with the specified id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of EcoWebServerDataTransferObjectsLawDTO</returns>
        public async System.Threading.Tasks.Task<EcoWebServerDataTransferObjectsLawDTO> LawGetLawAsync (int? id, string authtoken, string authtokentype)
        {
             ApiResponse<EcoWebServerDataTransferObjectsLawDTO> localVarResponse = await LawGetLawAsyncWithHttpInfo(id, authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the law with the specified id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (EcoWebServerDataTransferObjectsLawDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EcoWebServerDataTransferObjectsLawDTO>> LawGetLawAsyncWithHttpInfo (int? id, string authtoken, string authtokentype)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LawApi->LawGetLaw");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawGetLaw");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawGetLaw");

            var localVarPath = "/api/v1/laws/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawGetLaw", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EcoWebServerDataTransferObjectsLawDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EcoWebServerDataTransferObjectsLawDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EcoWebServerDataTransferObjectsLawDTO)));
        }

        /// <summary>
        /// Returns all laws currently present in the game in the specified states, active by default. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        public List<EcoWebServerDataTransferObjectsLawDTO> LawList (string states, string authtoken, string authtokentype)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>> localVarResponse = LawListWithHttpInfo(states, authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all laws currently present in the game in the specified states, active by default. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        public ApiResponse< List<EcoWebServerDataTransferObjectsLawDTO> > LawListWithHttpInfo (string states, string authtoken, string authtokentype)
        {
            // verify the required parameter 'states' is set
            if (states == null)
                throw new ApiException(400, "Missing required parameter 'states' when calling LawApi->LawList");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawList");

            var localVarPath = "/api/v1/laws/byStates/{states}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (states != null) localVarPathParams.Add("states", this.Configuration.ApiClient.ParameterToString(states)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsLawDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsLawDTO>)));
        }

        /// <summary>
        /// Returns all laws currently present in the game in the specified states, active by default. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsLawDTO>> LawListAsync (string states, string authtoken, string authtokentype)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>> localVarResponse = await LawListAsyncWithHttpInfo(states, authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all laws currently present in the game in the specified states, active by default. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>>> LawListAsyncWithHttpInfo (string states, string authtoken, string authtokentype)
        {
            // verify the required parameter 'states' is set
            if (states == null)
                throw new ApiException(400, "Missing required parameter 'states' when calling LawApi->LawList");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawList");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawList");

            var localVarPath = "/api/v1/laws/byStates/{states}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (states != null) localVarPathParams.Add("states", this.Configuration.ApiClient.ParameterToString(states)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsLawDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsLawDTO>)));
        }

        /// <summary>
        /// Returns all laws currently present in the game 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        public List<EcoWebServerDataTransferObjectsLawDTO> LawListAll (string authtoken, string authtokentype)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>> localVarResponse = LawListAllWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all laws currently present in the game 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        public ApiResponse< List<EcoWebServerDataTransferObjectsLawDTO> > LawListAllWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawListAll");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawListAll");

            var localVarPath = "/api/v1/laws";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawListAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsLawDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsLawDTO>)));
        }

        /// <summary>
        /// Returns all laws currently present in the game 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsLawDTO>> LawListAllAsync (string authtoken, string authtokentype)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>> localVarResponse = await LawListAllAsyncWithHttpInfo(authtoken, authtokentype);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all laws currently present in the game 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsLawDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>>> LawListAllAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling LawApi->LawListAll");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling LawApi->LawListAll");

            var localVarPath = "/api/v1/laws";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LawListAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsLawDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsLawDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsLawDTO>)));
        }

    }
}
