/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EcoServer-API.Client;
using EcoServer-API.Model;

namespace EcoServer-API.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IElectionApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a comment to the currently running election, if any.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a ??.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <param name="body">The comment to be added to the election. (optional)</param>
        /// <returns></returns>
        void ElectionAddComment (string authtoken, string authtokentype, int? electionId = null, EcoWebServerDataTransferObjectsElectionCommentDTO body = null);

        /// <summary>
        /// Adds a comment to the currently running election, if any.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a ??.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <param name="body">The comment to be added to the election. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ElectionAddCommentWithHttpInfo (string authtoken, string authtokentype, int? electionId = null, EcoWebServerDataTransferObjectsElectionCommentDTO body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void ElectionFinishElection (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ElectionFinishElectionWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Forces the currently running election to end now, and for the current election winner to become the leader. Can only be called by an admin or dev.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a Admin user.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns></returns>
        void ElectionForceElectionEnd (string authtoken, string authtokentype, int? electionId = null);

        /// <summary>
        /// Forces the currently running election to end now, and for the current election winner to become the leader. Can only be called by an admin or dev.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a Admin user.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ElectionForceElectionEndWithHttpInfo (string authtoken, string authtokentype, int? electionId = null);
        /// <summary>
        /// Create a bunch of test elections.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void ElectionGenerateTestData (string authtoken, string authtokentype);

        /// <summary>
        /// Create a bunch of test elections.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ElectionGenerateTestDataWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// List comments on the election.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsElectionCommentDTO&gt;</returns>
        List<EcoWebServerDataTransferObjectsElectionCommentDTO> ElectionGetComments (string authtoken, string authtokentype, int? electionId = null);

        /// <summary>
        /// List comments on the election.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsElectionCommentDTO&gt;</returns>
        ApiResponse<List<EcoWebServerDataTransferObjectsElectionCommentDTO>> ElectionGetCommentsWithHttpInfo (string authtoken, string authtokentype, int? electionId = null);
        /// <summary>
        /// Returns the elected title with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void ElectionGetElectedTitleById (int? id, string authtoken, string authtokentype);

        /// <summary>
        /// Returns the elected title with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ElectionGetElectedTitleByIdWithHttpInfo (int? id, string authtoken, string authtokentype);
        /// <summary>
        /// Returns the election with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        void ElectionGetElectionById (int? id, string authtoken, string authtokentype);

        /// <summary>
        /// Returns the election with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ElectionGetElectionByIdWithHttpInfo (int? id, string authtoken, string authtokentype);
        /// <summary>
        /// Returns all elected titles and their occupants matching the given state (active by default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="state"> (optional)</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsElectedTitleDTO&gt;</returns>
        List<EcoWebServerDataTransferObjectsElectedTitleDTO> ElectionListElectedTitles (string authtoken, string authtokentype, Object state = null);

        /// <summary>
        /// Returns all elected titles and their occupants matching the given state (active by default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="state"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsElectedTitleDTO&gt;</returns>
        ApiResponse<List<EcoWebServerDataTransferObjectsElectedTitleDTO>> ElectionListElectedTitlesWithHttpInfo (string authtoken, string authtokentype, Object state = null);
        /// <summary>
        /// Returns all elections that are either active or inactive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="returnActive"> (optional, default to true)</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsElectionDTO&gt;</returns>
        List<EcoWebServerDataTransferObjectsElectionDTO> ElectionListElections (string authtoken, string authtokentype, bool? returnActive = null);

        /// <summary>
        /// Returns all elections that are either active or inactive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="returnActive"> (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsElectionDTO&gt;</returns>
        ApiResponse<List<EcoWebServerDataTransferObjectsElectionDTO>> ElectionListElectionsWithHttpInfo (string authtoken, string authtokentype, bool? returnActive = null);
        /// <summary>
        /// Places a vote on behalf of the given player.  Can only be called if an election is currently running.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a ??.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="forceVote">Force vote ignoring election process. (optional)</param>
        /// <param name="body">The player&#39;s vote.  Must contain a ranked list of all candidates for the current election. (optional)</param>
        /// <returns></returns>
        void ElectionVote (string authtoken, string authtokentype, bool? forceVote = null, EcoWebServerDataTransferObjectsRunoffVoteDTO body = null);

        /// <summary>
        /// Places a vote on behalf of the given player.  Can only be called if an election is currently running.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a ??.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="forceVote">Force vote ignoring election process. (optional)</param>
        /// <param name="body">The player&#39;s vote.  Must contain a ranked list of all candidates for the current election. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ElectionVoteWithHttpInfo (string authtoken, string authtokentype, bool? forceVote = null, EcoWebServerDataTransferObjectsRunoffVoteDTO body = null);
        /// <summary>
        /// Returns a list of votes that were made on the indicated election.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="id"> (optional)</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsRunoffVoteDTO&gt;</returns>
        List<EcoWebServerDataTransferObjectsRunoffVoteDTO> ElectionVotes (string authtoken, string authtokentype, int? id = null);

        /// <summary>
        /// Returns a list of votes that were made on the indicated election.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsRunoffVoteDTO&gt;</returns>
        ApiResponse<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>> ElectionVotesWithHttpInfo (string authtoken, string authtokentype, int? id = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a comment to the currently running election, if any.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a ??.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <param name="body">The comment to be added to the election. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ElectionAddCommentAsync (string authtoken, string authtokentype, int? electionId = null, EcoWebServerDataTransferObjectsElectionCommentDTO body = null);

        /// <summary>
        /// Adds a comment to the currently running election, if any.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a ??.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <param name="body">The comment to be added to the election. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ElectionAddCommentAsyncWithHttpInfo (string authtoken, string authtokentype, int? electionId = null, EcoWebServerDataTransferObjectsElectionCommentDTO body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ElectionFinishElectionAsync (string authtoken, string authtokentype);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ElectionFinishElectionAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// Forces the currently running election to end now, and for the current election winner to become the leader. Can only be called by an admin or dev.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a Admin user.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ElectionForceElectionEndAsync (string authtoken, string authtokentype, int? electionId = null);

        /// <summary>
        /// Forces the currently running election to end now, and for the current election winner to become the leader. Can only be called by an admin or dev.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a Admin user.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ElectionForceElectionEndAsyncWithHttpInfo (string authtoken, string authtokentype, int? electionId = null);
        /// <summary>
        /// Create a bunch of test elections.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ElectionGenerateTestDataAsync (string authtoken, string authtokentype);

        /// <summary>
        /// Create a bunch of test elections.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ElectionGenerateTestDataAsyncWithHttpInfo (string authtoken, string authtokentype);
        /// <summary>
        /// List comments on the election.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsElectionCommentDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsElectionCommentDTO>> ElectionGetCommentsAsync (string authtoken, string authtokentype, int? electionId = null);

        /// <summary>
        /// List comments on the election.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsElectionCommentDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsElectionCommentDTO>>> ElectionGetCommentsAsyncWithHttpInfo (string authtoken, string authtokentype, int? electionId = null);
        /// <summary>
        /// Returns the elected title with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ElectionGetElectedTitleByIdAsync (int? id, string authtoken, string authtokentype);

        /// <summary>
        /// Returns the elected title with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ElectionGetElectedTitleByIdAsyncWithHttpInfo (int? id, string authtoken, string authtokentype);
        /// <summary>
        /// Returns the election with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ElectionGetElectionByIdAsync (int? id, string authtoken, string authtokentype);

        /// <summary>
        /// Returns the election with the given id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ElectionGetElectionByIdAsyncWithHttpInfo (int? id, string authtoken, string authtokentype);
        /// <summary>
        /// Returns all elected titles and their occupants matching the given state (active by default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="state"> (optional)</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsElectedTitleDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsElectedTitleDTO>> ElectionListElectedTitlesAsync (string authtoken, string authtokentype, Object state = null);

        /// <summary>
        /// Returns all elected titles and their occupants matching the given state (active by default).
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="state"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsElectedTitleDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsElectedTitleDTO>>> ElectionListElectedTitlesAsyncWithHttpInfo (string authtoken, string authtokentype, Object state = null);
        /// <summary>
        /// Returns all elections that are either active or inactive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="returnActive"> (optional, default to true)</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsElectionDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsElectionDTO>> ElectionListElectionsAsync (string authtoken, string authtokentype, bool? returnActive = null);

        /// <summary>
        /// Returns all elections that are either active or inactive.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="returnActive"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsElectionDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsElectionDTO>>> ElectionListElectionsAsyncWithHttpInfo (string authtoken, string authtokentype, bool? returnActive = null);
        /// <summary>
        /// Places a vote on behalf of the given player.  Can only be called if an election is currently running.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a ??.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="forceVote">Force vote ignoring election process. (optional)</param>
        /// <param name="body">The player&#39;s vote.  Must contain a ranked list of all candidates for the current election. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ElectionVoteAsync (string authtoken, string authtokentype, bool? forceVote = null, EcoWebServerDataTransferObjectsRunoffVoteDTO body = null);

        /// <summary>
        /// Places a vote on behalf of the given player.  Can only be called if an election is currently running.
        /// </summary>
        /// <remarks>
        /// &gt; This endpoint can only be invoked by a ??.
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="forceVote">Force vote ignoring election process. (optional)</param>
        /// <param name="body">The player&#39;s vote.  Must contain a ranked list of all candidates for the current election. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ElectionVoteAsyncWithHttpInfo (string authtoken, string authtokentype, bool? forceVote = null, EcoWebServerDataTransferObjectsRunoffVoteDTO body = null);
        /// <summary>
        /// Returns a list of votes that were made on the indicated election.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsRunoffVoteDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>> ElectionVotesAsync (string authtoken, string authtokentype, int? id = null);

        /// <summary>
        /// Returns a list of votes that were made on the indicated election.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsRunoffVoteDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>>> ElectionVotesAsyncWithHttpInfo (string authtoken, string authtokentype, int? id = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ElectionApi : IElectionApi
    {
        private EcoServer-API.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ElectionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ElectionApi(String basePath)
        {
            this.Configuration = new EcoServer-API.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EcoServer-API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ElectionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ElectionApi(EcoServer-API.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EcoServer-API.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EcoServer-API.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EcoServer-API.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EcoServer-API.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a comment to the currently running election, if any. &gt; This endpoint can only be invoked by a ??.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <param name="body">The comment to be added to the election. (optional)</param>
        /// <returns></returns>
        public void ElectionAddComment (string authtoken, string authtokentype, int? electionId = null, EcoWebServerDataTransferObjectsElectionCommentDTO body = null)
        {
             ElectionAddCommentWithHttpInfo(authtoken, authtokentype, electionId, body);
        }

        /// <summary>
        /// Adds a comment to the currently running election, if any. &gt; This endpoint can only be invoked by a ??.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <param name="body">The comment to be added to the election. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ElectionAddCommentWithHttpInfo (string authtoken, string authtokentype, int? electionId = null, EcoWebServerDataTransferObjectsElectionCommentDTO body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionAddComment");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionAddComment");

            var localVarPath = "/api/v1/elections/addcomment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (electionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "electionId", electionId)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionAddComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adds a comment to the currently running election, if any. &gt; This endpoint can only be invoked by a ??.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <param name="body">The comment to be added to the election. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ElectionAddCommentAsync (string authtoken, string authtokentype, int? electionId = null, EcoWebServerDataTransferObjectsElectionCommentDTO body = null)
        {
             await ElectionAddCommentAsyncWithHttpInfo(authtoken, authtokentype, electionId, body);

        }

        /// <summary>
        /// Adds a comment to the currently running election, if any. &gt; This endpoint can only be invoked by a ??.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <param name="body">The comment to be added to the election. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ElectionAddCommentAsyncWithHttpInfo (string authtoken, string authtokentype, int? electionId = null, EcoWebServerDataTransferObjectsElectionCommentDTO body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionAddComment");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionAddComment");

            var localVarPath = "/api/v1/elections/addcomment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (electionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "electionId", electionId)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionAddComment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void ElectionFinishElection (string authtoken, string authtokentype)
        {
             ElectionFinishElectionWithHttpInfo(authtoken, authtokentype);
        }

        /// <summary>
        ///  &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ElectionFinishElectionWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionFinishElection");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionFinishElection");

            var localVarPath = "/api/v1/elections/finishelection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionFinishElection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ElectionFinishElectionAsync (string authtoken, string authtokentype)
        {
             await ElectionFinishElectionAsyncWithHttpInfo(authtoken, authtokentype);

        }

        /// <summary>
        ///  &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ElectionFinishElectionAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionFinishElection");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionFinishElection");

            var localVarPath = "/api/v1/elections/finishelection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionFinishElection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Forces the currently running election to end now, and for the current election winner to become the leader. Can only be called by an admin or dev. &gt; This endpoint can only be invoked by a Admin user.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns></returns>
        public void ElectionForceElectionEnd (string authtoken, string authtokentype, int? electionId = null)
        {
             ElectionForceElectionEndWithHttpInfo(authtoken, authtokentype, electionId);
        }

        /// <summary>
        /// Forces the currently running election to end now, and for the current election winner to become the leader. Can only be called by an admin or dev. &gt; This endpoint can only be invoked by a Admin user.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ElectionForceElectionEndWithHttpInfo (string authtoken, string authtokentype, int? electionId = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionForceElectionEnd");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionForceElectionEnd");

            var localVarPath = "/api/v1/elections/forceelectionend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (electionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "electionId", electionId)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionForceElectionEnd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Forces the currently running election to end now, and for the current election winner to become the leader. Can only be called by an admin or dev. &gt; This endpoint can only be invoked by a Admin user.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ElectionForceElectionEndAsync (string authtoken, string authtokentype, int? electionId = null)
        {
             await ElectionForceElectionEndAsyncWithHttpInfo(authtoken, authtokentype, electionId);

        }

        /// <summary>
        /// Forces the currently running election to end now, and for the current election winner to become the leader. Can only be called by an admin or dev. &gt; This endpoint can only be invoked by a Admin user.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ElectionForceElectionEndAsyncWithHttpInfo (string authtoken, string authtokentype, int? electionId = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionForceElectionEnd");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionForceElectionEnd");

            var localVarPath = "/api/v1/elections/forceelectionend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (electionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "electionId", electionId)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionForceElectionEnd", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a bunch of test elections. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void ElectionGenerateTestData (string authtoken, string authtokentype)
        {
             ElectionGenerateTestDataWithHttpInfo(authtoken, authtokentype);
        }

        /// <summary>
        /// Create a bunch of test elections. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ElectionGenerateTestDataWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionGenerateTestData");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionGenerateTestData");

            var localVarPath = "/api/v1/elections/generatetestdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionGenerateTestData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a bunch of test elections. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ElectionGenerateTestDataAsync (string authtoken, string authtokentype)
        {
             await ElectionGenerateTestDataAsyncWithHttpInfo(authtoken, authtokentype);

        }

        /// <summary>
        /// Create a bunch of test elections. &gt; This endpoint can only be invoked when AllowDebugCalls is enabled on the server.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ElectionGenerateTestDataAsyncWithHttpInfo (string authtoken, string authtokentype)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionGenerateTestData");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionGenerateTestData");

            var localVarPath = "/api/v1/elections/generatetestdata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionGenerateTestData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List comments on the election. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsElectionCommentDTO&gt;</returns>
        public List<EcoWebServerDataTransferObjectsElectionCommentDTO> ElectionGetComments (string authtoken, string authtokentype, int? electionId = null)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsElectionCommentDTO>> localVarResponse = ElectionGetCommentsWithHttpInfo(authtoken, authtokentype, electionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List comments on the election. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsElectionCommentDTO&gt;</returns>
        public ApiResponse< List<EcoWebServerDataTransferObjectsElectionCommentDTO> > ElectionGetCommentsWithHttpInfo (string authtoken, string authtokentype, int? electionId = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionGetComments");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionGetComments");

            var localVarPath = "/api/v1/elections/listcomments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (electionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "electionId", electionId)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionGetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsElectionCommentDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsElectionCommentDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsElectionCommentDTO>)));
        }

        /// <summary>
        /// List comments on the election. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsElectionCommentDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsElectionCommentDTO>> ElectionGetCommentsAsync (string authtoken, string authtokentype, int? electionId = null)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsElectionCommentDTO>> localVarResponse = await ElectionGetCommentsAsyncWithHttpInfo(authtoken, authtokentype, electionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List comments on the election. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="electionId">ID of the election. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsElectionCommentDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsElectionCommentDTO>>> ElectionGetCommentsAsyncWithHttpInfo (string authtoken, string authtokentype, int? electionId = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionGetComments");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionGetComments");

            var localVarPath = "/api/v1/elections/listcomments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (electionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "electionId", electionId)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionGetComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsElectionCommentDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsElectionCommentDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsElectionCommentDTO>)));
        }

        /// <summary>
        /// Returns the elected title with the given id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void ElectionGetElectedTitleById (int? id, string authtoken, string authtokentype)
        {
             ElectionGetElectedTitleByIdWithHttpInfo(id, authtoken, authtokentype);
        }

        /// <summary>
        /// Returns the elected title with the given id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ElectionGetElectedTitleByIdWithHttpInfo (int? id, string authtoken, string authtokentype)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ElectionApi->ElectionGetElectedTitleById");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionGetElectedTitleById");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionGetElectedTitleById");

            var localVarPath = "/api/v1/elections/titles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionGetElectedTitleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the elected title with the given id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ElectionGetElectedTitleByIdAsync (int? id, string authtoken, string authtokentype)
        {
             await ElectionGetElectedTitleByIdAsyncWithHttpInfo(id, authtoken, authtokentype);

        }

        /// <summary>
        /// Returns the elected title with the given id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ElectionGetElectedTitleByIdAsyncWithHttpInfo (int? id, string authtoken, string authtokentype)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ElectionApi->ElectionGetElectedTitleById");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionGetElectedTitleById");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionGetElectedTitleById");

            var localVarPath = "/api/v1/elections/titles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionGetElectedTitleById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the election with the given id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns></returns>
        public void ElectionGetElectionById (int? id, string authtoken, string authtokentype)
        {
             ElectionGetElectionByIdWithHttpInfo(id, authtoken, authtokentype);
        }

        /// <summary>
        /// Returns the election with the given id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ElectionGetElectionByIdWithHttpInfo (int? id, string authtoken, string authtokentype)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ElectionApi->ElectionGetElectionById");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionGetElectionById");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionGetElectionById");

            var localVarPath = "/api/v1/elections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionGetElectionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns the election with the given id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ElectionGetElectionByIdAsync (int? id, string authtoken, string authtokentype)
        {
             await ElectionGetElectionByIdAsyncWithHttpInfo(id, authtoken, authtokentype);

        }

        /// <summary>
        /// Returns the election with the given id. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ElectionGetElectionByIdAsyncWithHttpInfo (int? id, string authtoken, string authtokentype)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ElectionApi->ElectionGetElectionById");
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionGetElectionById");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionGetElectionById");

            var localVarPath = "/api/v1/elections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionGetElectionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns all elected titles and their occupants matching the given state (active by default). 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="state"> (optional)</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsElectedTitleDTO&gt;</returns>
        public List<EcoWebServerDataTransferObjectsElectedTitleDTO> ElectionListElectedTitles (string authtoken, string authtokentype, Object state = null)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsElectedTitleDTO>> localVarResponse = ElectionListElectedTitlesWithHttpInfo(authtoken, authtokentype, state);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all elected titles and their occupants matching the given state (active by default). 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="state"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsElectedTitleDTO&gt;</returns>
        public ApiResponse< List<EcoWebServerDataTransferObjectsElectedTitleDTO> > ElectionListElectedTitlesWithHttpInfo (string authtoken, string authtokentype, Object state = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionListElectedTitles");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionListElectedTitles");

            var localVarPath = "/api/v1/elections/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionListElectedTitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsElectedTitleDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsElectedTitleDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsElectedTitleDTO>)));
        }

        /// <summary>
        /// Returns all elected titles and their occupants matching the given state (active by default). 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="state"> (optional)</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsElectedTitleDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsElectedTitleDTO>> ElectionListElectedTitlesAsync (string authtoken, string authtokentype, Object state = null)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsElectedTitleDTO>> localVarResponse = await ElectionListElectedTitlesAsyncWithHttpInfo(authtoken, authtokentype, state);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all elected titles and their occupants matching the given state (active by default). 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="state"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsElectedTitleDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsElectedTitleDTO>>> ElectionListElectedTitlesAsyncWithHttpInfo (string authtoken, string authtokentype, Object state = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionListElectedTitles");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionListElectedTitles");

            var localVarPath = "/api/v1/elections/titles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionListElectedTitles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsElectedTitleDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsElectedTitleDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsElectedTitleDTO>)));
        }

        /// <summary>
        /// Returns all elections that are either active or inactive. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="returnActive"> (optional, default to true)</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsElectionDTO&gt;</returns>
        public List<EcoWebServerDataTransferObjectsElectionDTO> ElectionListElections (string authtoken, string authtokentype, bool? returnActive = null)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsElectionDTO>> localVarResponse = ElectionListElectionsWithHttpInfo(authtoken, authtokentype, returnActive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns all elections that are either active or inactive. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="returnActive"> (optional, default to true)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsElectionDTO&gt;</returns>
        public ApiResponse< List<EcoWebServerDataTransferObjectsElectionDTO> > ElectionListElectionsWithHttpInfo (string authtoken, string authtokentype, bool? returnActive = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionListElections");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionListElections");

            var localVarPath = "/api/v1/elections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnActive", returnActive)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionListElections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsElectionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsElectionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsElectionDTO>)));
        }

        /// <summary>
        /// Returns all elections that are either active or inactive. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="returnActive"> (optional, default to true)</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsElectionDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsElectionDTO>> ElectionListElectionsAsync (string authtoken, string authtokentype, bool? returnActive = null)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsElectionDTO>> localVarResponse = await ElectionListElectionsAsyncWithHttpInfo(authtoken, authtokentype, returnActive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns all elections that are either active or inactive. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="returnActive"> (optional, default to true)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsElectionDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsElectionDTO>>> ElectionListElectionsAsyncWithHttpInfo (string authtoken, string authtokentype, bool? returnActive = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionListElections");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionListElections");

            var localVarPath = "/api/v1/elections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (returnActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "returnActive", returnActive)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionListElections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsElectionDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsElectionDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsElectionDTO>)));
        }

        /// <summary>
        /// Places a vote on behalf of the given player.  Can only be called if an election is currently running. &gt; This endpoint can only be invoked by a ??.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="forceVote">Force vote ignoring election process. (optional)</param>
        /// <param name="body">The player&#39;s vote.  Must contain a ranked list of all candidates for the current election. (optional)</param>
        /// <returns></returns>
        public void ElectionVote (string authtoken, string authtokentype, bool? forceVote = null, EcoWebServerDataTransferObjectsRunoffVoteDTO body = null)
        {
             ElectionVoteWithHttpInfo(authtoken, authtokentype, forceVote, body);
        }

        /// <summary>
        /// Places a vote on behalf of the given player.  Can only be called if an election is currently running. &gt; This endpoint can only be invoked by a ??.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="forceVote">Force vote ignoring election process. (optional)</param>
        /// <param name="body">The player&#39;s vote.  Must contain a ranked list of all candidates for the current election. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ElectionVoteWithHttpInfo (string authtoken, string authtokentype, bool? forceVote = null, EcoWebServerDataTransferObjectsRunoffVoteDTO body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionVote");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionVote");

            var localVarPath = "/api/v1/elections/vote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forceVote != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forceVote", forceVote)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionVote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Places a vote on behalf of the given player.  Can only be called if an election is currently running. &gt; This endpoint can only be invoked by a ??.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="forceVote">Force vote ignoring election process. (optional)</param>
        /// <param name="body">The player&#39;s vote.  Must contain a ranked list of all candidates for the current election. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ElectionVoteAsync (string authtoken, string authtokentype, bool? forceVote = null, EcoWebServerDataTransferObjectsRunoffVoteDTO body = null)
        {
             await ElectionVoteAsyncWithHttpInfo(authtoken, authtokentype, forceVote, body);

        }

        /// <summary>
        /// Places a vote on behalf of the given player.  Can only be called if an election is currently running. &gt; This endpoint can only be invoked by a ??.
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="forceVote">Force vote ignoring election process. (optional)</param>
        /// <param name="body">The player&#39;s vote.  Must contain a ranked list of all candidates for the current election. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ElectionVoteAsyncWithHttpInfo (string authtoken, string authtokentype, bool? forceVote = null, EcoWebServerDataTransferObjectsRunoffVoteDTO body = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionVote");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionVote");

            var localVarPath = "/api/v1/elections/vote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forceVote != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "forceVote", forceVote)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionVote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Returns a list of votes that were made on the indicated election. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="id"> (optional)</param>
        /// <returns>List&lt;EcoWebServerDataTransferObjectsRunoffVoteDTO&gt;</returns>
        public List<EcoWebServerDataTransferObjectsRunoffVoteDTO> ElectionVotes (string authtoken, string authtokentype, int? id = null)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>> localVarResponse = ElectionVotesWithHttpInfo(authtoken, authtokentype, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a list of votes that were made on the indicated election. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EcoWebServerDataTransferObjectsRunoffVoteDTO&gt;</returns>
        public ApiResponse< List<EcoWebServerDataTransferObjectsRunoffVoteDTO> > ElectionVotesWithHttpInfo (string authtoken, string authtokentype, int? id = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionVotes");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionVotes");

            var localVarPath = "/api/v1/elections/votes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionVotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsRunoffVoteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsRunoffVoteDTO>)));
        }

        /// <summary>
        /// Returns a list of votes that were made on the indicated election. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of List&lt;EcoWebServerDataTransferObjectsRunoffVoteDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>> ElectionVotesAsync (string authtoken, string authtokentype, int? id = null)
        {
             ApiResponse<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>> localVarResponse = await ElectionVotesAsyncWithHttpInfo(authtoken, authtokentype, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns a list of votes that were made on the indicated election. 
        /// </summary>
        /// <exception cref="EcoServer-API.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authtoken">Eco user authentication token.</param>
        /// <param name="authtokentype">Eco user authentication token type.</param>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EcoWebServerDataTransferObjectsRunoffVoteDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>>> ElectionVotesAsyncWithHttpInfo (string authtoken, string authtokentype, int? id = null)
        {
            // verify the required parameter 'authtoken' is set
            if (authtoken == null)
                throw new ApiException(400, "Missing required parameter 'authtoken' when calling ElectionApi->ElectionVotes");
            // verify the required parameter 'authtokentype' is set
            if (authtokentype == null)
                throw new ApiException(400, "Missing required parameter 'authtokentype' when calling ElectionApi->ElectionVotes");

            var localVarPath = "/api/v1/elections/votes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (authtoken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", authtoken)); // query parameter
            if (authtokentype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", authtokentype)); // query parameter

            // authentication (authtoken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtoken")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtoken", this.Configuration.GetApiKeyWithPrefix("authtoken")));
            }
            // authentication (authtokentype) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("authtokentype")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "authtokentype", this.Configuration.GetApiKeyWithPrefix("authtokentype")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ElectionVotes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EcoWebServerDataTransferObjectsRunoffVoteDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EcoWebServerDataTransferObjectsRunoffVoteDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EcoWebServerDataTransferObjectsRunoffVoteDTO>)));
        }

    }
}
