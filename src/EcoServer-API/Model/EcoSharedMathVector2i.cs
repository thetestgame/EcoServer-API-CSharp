/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServer-API.Client.SwaggerDateConverter;

namespace EcoServer-API.Model
{
    /// <summary>
    /// EcoSharedMathVector2i
    /// </summary>
    [DataContract]
    public partial class EcoSharedMathVector2i :  IEquatable<EcoSharedMathVector2i>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoSharedMathVector2i" /> class.
        /// </summary>
        /// <param name="x">x.</param>
        /// <param name="y">y.</param>
        public EcoSharedMathVector2i(int? x = default(int?), int? y = default(int?))
        {
            this.X = x;
            this.Y = y;
        }
        
        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name="x", EmitDefaultValue=false)]
        public int? X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name="y", EmitDefaultValue=false)]
        public int? Y { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public float? Length { get; private set; }

        /// <summary>
        /// Gets or Sets Magnitude
        /// </summary>
        [DataMember(Name="magnitude", EmitDefaultValue=false)]
        public float? Magnitude { get; private set; }

        /// <summary>
        /// Gets or Sets MagnitudeSq
        /// </summary>
        [DataMember(Name="magnitudeSq", EmitDefaultValue=false)]
        public float? MagnitudeSq { get; private set; }

        /// <summary>
        /// Gets or Sets Area
        /// </summary>
        [DataMember(Name="area", EmitDefaultValue=false)]
        public int? Area { get; private set; }

        /// <summary>
        /// Gets or Sets NeighborsAdjacent
        /// </summary>
        [DataMember(Name="neighborsAdjacent", EmitDefaultValue=false)]
        public List<EcoSharedMathVector2i> NeighborsAdjacent { get; private set; }

        /// <summary>
        /// Gets or Sets NeighborsDiagonal
        /// </summary>
        [DataMember(Name="neighborsDiagonal", EmitDefaultValue=false)]
        public List<EcoSharedMathVector2i> NeighborsDiagonal { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoSharedMathVector2i {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Magnitude: ").Append(Magnitude).Append("\n");
            sb.Append("  MagnitudeSq: ").Append(MagnitudeSq).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  NeighborsAdjacent: ").Append(NeighborsAdjacent).Append("\n");
            sb.Append("  NeighborsDiagonal: ").Append(NeighborsDiagonal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoSharedMathVector2i);
        }

        /// <summary>
        /// Returns true if EcoSharedMathVector2i instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoSharedMathVector2i to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoSharedMathVector2i input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Magnitude == input.Magnitude ||
                    (this.Magnitude != null &&
                    this.Magnitude.Equals(input.Magnitude))
                ) && 
                (
                    this.MagnitudeSq == input.MagnitudeSq ||
                    (this.MagnitudeSq != null &&
                    this.MagnitudeSq.Equals(input.MagnitudeSq))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.NeighborsAdjacent == input.NeighborsAdjacent ||
                    this.NeighborsAdjacent != null &&
                    this.NeighborsAdjacent.SequenceEqual(input.NeighborsAdjacent)
                ) && 
                (
                    this.NeighborsDiagonal == input.NeighborsDiagonal ||
                    this.NeighborsDiagonal != null &&
                    this.NeighborsDiagonal.SequenceEqual(input.NeighborsDiagonal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Magnitude != null)
                    hashCode = hashCode * 59 + this.Magnitude.GetHashCode();
                if (this.MagnitudeSq != null)
                    hashCode = hashCode * 59 + this.MagnitudeSq.GetHashCode();
                if (this.Area != null)
                    hashCode = hashCode * 59 + this.Area.GetHashCode();
                if (this.NeighborsAdjacent != null)
                    hashCode = hashCode * 59 + this.NeighborsAdjacent.GetHashCode();
                if (this.NeighborsDiagonal != null)
                    hashCode = hashCode * 59 + this.NeighborsDiagonal.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
