/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServer-API.Client.SwaggerDateConverter;

namespace EcoServer-API.Model
{
    /// <summary>
    /// EcoGameplayCivicsElectionsChoiceResults
    /// </summary>
    [DataContract]
    public partial class EcoGameplayCivicsElectionsChoiceResults :  IEquatable<EcoGameplayCivicsElectionsChoiceResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoGameplayCivicsElectionsChoiceResults" /> class.
        /// </summary>
        /// <param name="choiceID">choiceID.</param>
        /// <param name="markedUpName">markedUpName.</param>
        /// <param name="votesPerRound">votesPerRound.</param>
        public EcoGameplayCivicsElectionsChoiceResults(int? choiceID = default(int?), string markedUpName = default(string), List<int?> votesPerRound = default(List<int?>))
        {
            this.ChoiceID = choiceID;
            this.MarkedUpName = markedUpName;
            this.VotesPerRound = votesPerRound;
        }
        
        /// <summary>
        /// Gets or Sets ChoiceID
        /// </summary>
        [DataMember(Name="choiceID", EmitDefaultValue=false)]
        public int? ChoiceID { get; set; }

        /// <summary>
        /// Gets or Sets MarkedUpName
        /// </summary>
        [DataMember(Name="markedUpName", EmitDefaultValue=false)]
        public string MarkedUpName { get; set; }

        /// <summary>
        /// Gets or Sets VotesPerRound
        /// </summary>
        [DataMember(Name="votesPerRound", EmitDefaultValue=false)]
        public List<int?> VotesPerRound { get; set; }

        /// <summary>
        /// Gets or Sets Votes
        /// </summary>
        [DataMember(Name="votes", EmitDefaultValue=false)]
        public int? Votes { get; private set; }

        /// <summary>
        /// Gets or Sets SimpleResultVotes
        /// </summary>
        [DataMember(Name="simpleResultVotes", EmitDefaultValue=false)]
        public int? SimpleResultVotes { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoGameplayCivicsElectionsChoiceResults {\n");
            sb.Append("  ChoiceID: ").Append(ChoiceID).Append("\n");
            sb.Append("  MarkedUpName: ").Append(MarkedUpName).Append("\n");
            sb.Append("  VotesPerRound: ").Append(VotesPerRound).Append("\n");
            sb.Append("  Votes: ").Append(Votes).Append("\n");
            sb.Append("  SimpleResultVotes: ").Append(SimpleResultVotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoGameplayCivicsElectionsChoiceResults);
        }

        /// <summary>
        /// Returns true if EcoGameplayCivicsElectionsChoiceResults instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoGameplayCivicsElectionsChoiceResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoGameplayCivicsElectionsChoiceResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChoiceID == input.ChoiceID ||
                    (this.ChoiceID != null &&
                    this.ChoiceID.Equals(input.ChoiceID))
                ) && 
                (
                    this.MarkedUpName == input.MarkedUpName ||
                    (this.MarkedUpName != null &&
                    this.MarkedUpName.Equals(input.MarkedUpName))
                ) && 
                (
                    this.VotesPerRound == input.VotesPerRound ||
                    this.VotesPerRound != null &&
                    this.VotesPerRound.SequenceEqual(input.VotesPerRound)
                ) && 
                (
                    this.Votes == input.Votes ||
                    (this.Votes != null &&
                    this.Votes.Equals(input.Votes))
                ) && 
                (
                    this.SimpleResultVotes == input.SimpleResultVotes ||
                    (this.SimpleResultVotes != null &&
                    this.SimpleResultVotes.Equals(input.SimpleResultVotes))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChoiceID != null)
                    hashCode = hashCode * 59 + this.ChoiceID.GetHashCode();
                if (this.MarkedUpName != null)
                    hashCode = hashCode * 59 + this.MarkedUpName.GetHashCode();
                if (this.VotesPerRound != null)
                    hashCode = hashCode * 59 + this.VotesPerRound.GetHashCode();
                if (this.Votes != null)
                    hashCode = hashCode * 59 + this.Votes.GetHashCode();
                if (this.SimpleResultVotes != null)
                    hashCode = hashCode * 59 + this.SimpleResultVotes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
