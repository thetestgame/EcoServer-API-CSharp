/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServer-API.Client.SwaggerDateConverter;

namespace EcoServer-API.Model
{
    /// <summary>
    /// EcoWebServerDataTransferObjectsRunoffVoteDTO
    /// </summary>
    [DataContract]
    public partial class EcoWebServerDataTransferObjectsRunoffVoteDTO :  IEquatable<EcoWebServerDataTransferObjectsRunoffVoteDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoWebServerDataTransferObjectsRunoffVoteDTO" /> class.
        /// </summary>
        /// <param name="electionID">electionID.</param>
        /// <param name="voter">voter.</param>
        /// <param name="rankedVotes">rankedVotes.</param>
        public EcoWebServerDataTransferObjectsRunoffVoteDTO(int? electionID = default(int?), string voter = default(string), List<int?> rankedVotes = default(List<int?>))
        {
            this.ElectionID = electionID;
            this.Voter = voter;
            this.RankedVotes = rankedVotes;
        }
        
        /// <summary>
        /// Gets or Sets ElectionID
        /// </summary>
        [DataMember(Name="electionID", EmitDefaultValue=false)]
        public int? ElectionID { get; set; }

        /// <summary>
        /// Gets or Sets Voter
        /// </summary>
        [DataMember(Name="voter", EmitDefaultValue=false)]
        public string Voter { get; set; }

        /// <summary>
        /// Gets or Sets RankedVotes
        /// </summary>
        [DataMember(Name="rankedVotes", EmitDefaultValue=false)]
        public List<int?> RankedVotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoWebServerDataTransferObjectsRunoffVoteDTO {\n");
            sb.Append("  ElectionID: ").Append(ElectionID).Append("\n");
            sb.Append("  Voter: ").Append(Voter).Append("\n");
            sb.Append("  RankedVotes: ").Append(RankedVotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoWebServerDataTransferObjectsRunoffVoteDTO);
        }

        /// <summary>
        /// Returns true if EcoWebServerDataTransferObjectsRunoffVoteDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoWebServerDataTransferObjectsRunoffVoteDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoWebServerDataTransferObjectsRunoffVoteDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ElectionID == input.ElectionID ||
                    (this.ElectionID != null &&
                    this.ElectionID.Equals(input.ElectionID))
                ) && 
                (
                    this.Voter == input.Voter ||
                    (this.Voter != null &&
                    this.Voter.Equals(input.Voter))
                ) && 
                (
                    this.RankedVotes == input.RankedVotes ||
                    this.RankedVotes != null &&
                    this.RankedVotes.SequenceEqual(input.RankedVotes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ElectionID != null)
                    hashCode = hashCode * 59 + this.ElectionID.GetHashCode();
                if (this.Voter != null)
                    hashCode = hashCode * 59 + this.Voter.GetHashCode();
                if (this.RankedVotes != null)
                    hashCode = hashCode * 59 + this.RankedVotes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
