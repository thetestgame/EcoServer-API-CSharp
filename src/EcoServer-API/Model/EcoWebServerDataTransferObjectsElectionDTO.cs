/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServer-API.Client.SwaggerDateConverter;

namespace EcoServer-API.Model
{
    /// <summary>
    /// EcoWebServerDataTransferObjectsElectionDTO
    /// </summary>
    [DataContract]
    public partial class EcoWebServerDataTransferObjectsElectionDTO :  IEquatable<EcoWebServerDataTransferObjectsElectionDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoWebServerDataTransferObjectsElectionDTO" /> class.
        /// </summary>
        /// <param name="choices">choices.</param>
        /// <param name="totalVotes">totalVotes.</param>
        /// <param name="timeEnd">timeEnd.</param>
        /// <param name="timeEndAgo">timeEndAgo.</param>
        /// <param name="timeStart">timeStart.</param>
        /// <param name="timeStartAgo">timeStartAgo.</param>
        /// <param name="finished">finished.</param>
        /// <param name="passed">passed.</param>
        /// <param name="pendingVote">pendingVote.</param>
        /// <param name="comments">comments.</param>
        /// <param name="provisions">provisions.</param>
        /// <param name="results">results.</param>
        /// <param name="electionProcess">electionProcess.</param>
        /// <param name="positionForWinner">positionForWinner.</param>
        /// <param name="booleanElection">booleanElection.</param>
        /// <param name="electionDescription">electionDescription.</param>
        public EcoWebServerDataTransferObjectsElectionDTO(List<EcoWebServerDataTransferObjectsElectionChoiceDTO> choices = default(List<EcoWebServerDataTransferObjectsElectionChoiceDTO>), int? totalVotes = default(int?), double? timeEnd = default(double?), double? timeEndAgo = default(double?), double? timeStart = default(double?), double? timeStartAgo = default(double?), bool? finished = default(bool?), bool? passed = default(bool?), bool? pendingVote = default(bool?), List<EcoWebServerDataTransferObjectsElectionCommentDTO> comments = default(List<EcoWebServerDataTransferObjectsElectionCommentDTO>), List<EcoWebServerDataTransferObjectsCivicActionDTO> provisions = default(List<EcoWebServerDataTransferObjectsCivicActionDTO>), EcoWebServerDataTransferObjectsElectionResultsDTO results = default(EcoWebServerDataTransferObjectsElectionResultsDTO), EcoWebServerDataTransferObjectsElectionProcessDTO electionProcess = default(EcoWebServerDataTransferObjectsElectionProcessDTO), EcoWebServerDataTransferObjectsElectedTitleDTO positionForWinner = default(EcoWebServerDataTransferObjectsElectedTitleDTO), bool? booleanElection = default(bool?), string electionDescription = default(string))
        {
            this.Choices = choices;
            this.TotalVotes = totalVotes;
            this.TimeEnd = timeEnd;
            this.TimeEndAgo = timeEndAgo;
            this.TimeStart = timeStart;
            this.TimeStartAgo = timeStartAgo;
            this.Finished = finished;
            this.Passed = passed;
            this.PendingVote = pendingVote;
            this.Comments = comments;
            this.Provisions = provisions;
            this.Results = results;
            this.ElectionProcess = electionProcess;
            this.PositionForWinner = positionForWinner;
            this.BooleanElection = booleanElection;
            this.ElectionDescription = electionDescription;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets UserDescription
        /// </summary>
        [DataMember(Name="userDescription", EmitDefaultValue=false)]
        public string UserDescription { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; private set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name="creator", EmitDefaultValue=false)]
        public string Creator { get; private set; }

        /// <summary>
        /// Gets or Sets Choices
        /// </summary>
        [DataMember(Name="choices", EmitDefaultValue=false)]
        public List<EcoWebServerDataTransferObjectsElectionChoiceDTO> Choices { get; set; }

        /// <summary>
        /// Gets or Sets TotalVotes
        /// </summary>
        [DataMember(Name="totalVotes", EmitDefaultValue=false)]
        public int? TotalVotes { get; set; }

        /// <summary>
        /// Gets or Sets TimeEnd
        /// </summary>
        [DataMember(Name="timeEnd", EmitDefaultValue=false)]
        public double? TimeEnd { get; set; }

        /// <summary>
        /// Gets or Sets TimeEndAgo
        /// </summary>
        [DataMember(Name="timeEndAgo", EmitDefaultValue=false)]
        public double? TimeEndAgo { get; set; }

        /// <summary>
        /// Gets or Sets TimeStart
        /// </summary>
        [DataMember(Name="timeStart", EmitDefaultValue=false)]
        public double? TimeStart { get; set; }

        /// <summary>
        /// Gets or Sets TimeStartAgo
        /// </summary>
        [DataMember(Name="timeStartAgo", EmitDefaultValue=false)]
        public double? TimeStartAgo { get; set; }

        /// <summary>
        /// Gets or Sets Finished
        /// </summary>
        [DataMember(Name="finished", EmitDefaultValue=false)]
        public bool? Finished { get; set; }

        /// <summary>
        /// Gets or Sets Passed
        /// </summary>
        [DataMember(Name="passed", EmitDefaultValue=false)]
        public bool? Passed { get; set; }

        /// <summary>
        /// Gets or Sets PendingVote
        /// </summary>
        [DataMember(Name="pendingVote", EmitDefaultValue=false)]
        public bool? PendingVote { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public List<EcoWebServerDataTransferObjectsElectionCommentDTO> Comments { get; set; }

        /// <summary>
        /// Gets or Sets Provisions
        /// </summary>
        [DataMember(Name="provisions", EmitDefaultValue=false)]
        public List<EcoWebServerDataTransferObjectsCivicActionDTO> Provisions { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public EcoWebServerDataTransferObjectsElectionResultsDTO Results { get; set; }

        /// <summary>
        /// Gets or Sets ElectionProcess
        /// </summary>
        [DataMember(Name="electionProcess", EmitDefaultValue=false)]
        public EcoWebServerDataTransferObjectsElectionProcessDTO ElectionProcess { get; set; }

        /// <summary>
        /// Gets or Sets PositionForWinner
        /// </summary>
        [DataMember(Name="positionForWinner", EmitDefaultValue=false)]
        public EcoWebServerDataTransferObjectsElectedTitleDTO PositionForWinner { get; set; }

        /// <summary>
        /// Gets or Sets BooleanElection
        /// </summary>
        [DataMember(Name="booleanElection", EmitDefaultValue=false)]
        public bool? BooleanElection { get; set; }

        /// <summary>
        /// Gets or Sets ElectionDescription
        /// </summary>
        [DataMember(Name="electionDescription", EmitDefaultValue=false)]
        public string ElectionDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoWebServerDataTransferObjectsElectionDTO {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UserDescription: ").Append(UserDescription).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  TotalVotes: ").Append(TotalVotes).Append("\n");
            sb.Append("  TimeEnd: ").Append(TimeEnd).Append("\n");
            sb.Append("  TimeEndAgo: ").Append(TimeEndAgo).Append("\n");
            sb.Append("  TimeStart: ").Append(TimeStart).Append("\n");
            sb.Append("  TimeStartAgo: ").Append(TimeStartAgo).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Passed: ").Append(Passed).Append("\n");
            sb.Append("  PendingVote: ").Append(PendingVote).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  Provisions: ").Append(Provisions).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  ElectionProcess: ").Append(ElectionProcess).Append("\n");
            sb.Append("  PositionForWinner: ").Append(PositionForWinner).Append("\n");
            sb.Append("  BooleanElection: ").Append(BooleanElection).Append("\n");
            sb.Append("  ElectionDescription: ").Append(ElectionDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoWebServerDataTransferObjectsElectionDTO);
        }

        /// <summary>
        /// Returns true if EcoWebServerDataTransferObjectsElectionDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoWebServerDataTransferObjectsElectionDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoWebServerDataTransferObjectsElectionDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.UserDescription == input.UserDescription ||
                    (this.UserDescription != null &&
                    this.UserDescription.Equals(input.UserDescription))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.Choices == input.Choices ||
                    this.Choices != null &&
                    this.Choices.SequenceEqual(input.Choices)
                ) && 
                (
                    this.TotalVotes == input.TotalVotes ||
                    (this.TotalVotes != null &&
                    this.TotalVotes.Equals(input.TotalVotes))
                ) && 
                (
                    this.TimeEnd == input.TimeEnd ||
                    (this.TimeEnd != null &&
                    this.TimeEnd.Equals(input.TimeEnd))
                ) && 
                (
                    this.TimeEndAgo == input.TimeEndAgo ||
                    (this.TimeEndAgo != null &&
                    this.TimeEndAgo.Equals(input.TimeEndAgo))
                ) && 
                (
                    this.TimeStart == input.TimeStart ||
                    (this.TimeStart != null &&
                    this.TimeStart.Equals(input.TimeStart))
                ) && 
                (
                    this.TimeStartAgo == input.TimeStartAgo ||
                    (this.TimeStartAgo != null &&
                    this.TimeStartAgo.Equals(input.TimeStartAgo))
                ) && 
                (
                    this.Finished == input.Finished ||
                    (this.Finished != null &&
                    this.Finished.Equals(input.Finished))
                ) && 
                (
                    this.Passed == input.Passed ||
                    (this.Passed != null &&
                    this.Passed.Equals(input.Passed))
                ) && 
                (
                    this.PendingVote == input.PendingVote ||
                    (this.PendingVote != null &&
                    this.PendingVote.Equals(input.PendingVote))
                ) && 
                (
                    this.Comments == input.Comments ||
                    this.Comments != null &&
                    this.Comments.SequenceEqual(input.Comments)
                ) && 
                (
                    this.Provisions == input.Provisions ||
                    this.Provisions != null &&
                    this.Provisions.SequenceEqual(input.Provisions)
                ) && 
                (
                    this.Results == input.Results ||
                    (this.Results != null &&
                    this.Results.Equals(input.Results))
                ) && 
                (
                    this.ElectionProcess == input.ElectionProcess ||
                    (this.ElectionProcess != null &&
                    this.ElectionProcess.Equals(input.ElectionProcess))
                ) && 
                (
                    this.PositionForWinner == input.PositionForWinner ||
                    (this.PositionForWinner != null &&
                    this.PositionForWinner.Equals(input.PositionForWinner))
                ) && 
                (
                    this.BooleanElection == input.BooleanElection ||
                    (this.BooleanElection != null &&
                    this.BooleanElection.Equals(input.BooleanElection))
                ) && 
                (
                    this.ElectionDescription == input.ElectionDescription ||
                    (this.ElectionDescription != null &&
                    this.ElectionDescription.Equals(input.ElectionDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.UserDescription != null)
                    hashCode = hashCode * 59 + this.UserDescription.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Creator != null)
                    hashCode = hashCode * 59 + this.Creator.GetHashCode();
                if (this.Choices != null)
                    hashCode = hashCode * 59 + this.Choices.GetHashCode();
                if (this.TotalVotes != null)
                    hashCode = hashCode * 59 + this.TotalVotes.GetHashCode();
                if (this.TimeEnd != null)
                    hashCode = hashCode * 59 + this.TimeEnd.GetHashCode();
                if (this.TimeEndAgo != null)
                    hashCode = hashCode * 59 + this.TimeEndAgo.GetHashCode();
                if (this.TimeStart != null)
                    hashCode = hashCode * 59 + this.TimeStart.GetHashCode();
                if (this.TimeStartAgo != null)
                    hashCode = hashCode * 59 + this.TimeStartAgo.GetHashCode();
                if (this.Finished != null)
                    hashCode = hashCode * 59 + this.Finished.GetHashCode();
                if (this.Passed != null)
                    hashCode = hashCode * 59 + this.Passed.GetHashCode();
                if (this.PendingVote != null)
                    hashCode = hashCode * 59 + this.PendingVote.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.Provisions != null)
                    hashCode = hashCode * 59 + this.Provisions.GetHashCode();
                if (this.Results != null)
                    hashCode = hashCode * 59 + this.Results.GetHashCode();
                if (this.ElectionProcess != null)
                    hashCode = hashCode * 59 + this.ElectionProcess.GetHashCode();
                if (this.PositionForWinner != null)
                    hashCode = hashCode * 59 + this.PositionForWinner.GetHashCode();
                if (this.BooleanElection != null)
                    hashCode = hashCode * 59 + this.BooleanElection.GetHashCode();
                if (this.ElectionDescription != null)
                    hashCode = hashCode * 59 + this.ElectionDescription.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
