/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServer-API.Client.SwaggerDateConverter;

namespace EcoServer-API.Model
{
    /// <summary>
    /// Result object from a command execution
    /// </summary>
    [DataContract]
    public partial class EcoWebServerDataTransferObjectsCommandResultDTO :  IEquatable<EcoWebServerDataTransferObjectsCommandResultDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoWebServerDataTransferObjectsCommandResultDTO" /> class.
        /// </summary>
        /// <param name="originalCommand">Represents the original requested command.</param>
        /// <param name="errored">Flag determining if there was an error during execution.</param>
        public EcoWebServerDataTransferObjectsCommandResultDTO(string originalCommand = default(string), bool? errored = default(bool?))
        {
            this.OriginalCommand = originalCommand;
            this.Errored = errored;
        }
        
        /// <summary>
        /// Represents the original requested command
        /// </summary>
        /// <value>Represents the original requested command</value>
        [DataMember(Name="originalCommand", EmitDefaultValue=false)]
        public string OriginalCommand { get; set; }

        /// <summary>
        /// Flag determining if there was an error during execution
        /// </summary>
        /// <value>Flag determining if there was an error during execution</value>
        [DataMember(Name="errored", EmitDefaultValue=false)]
        public bool? Errored { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoWebServerDataTransferObjectsCommandResultDTO {\n");
            sb.Append("  OriginalCommand: ").Append(OriginalCommand).Append("\n");
            sb.Append("  Errored: ").Append(Errored).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoWebServerDataTransferObjectsCommandResultDTO);
        }

        /// <summary>
        /// Returns true if EcoWebServerDataTransferObjectsCommandResultDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoWebServerDataTransferObjectsCommandResultDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoWebServerDataTransferObjectsCommandResultDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginalCommand == input.OriginalCommand ||
                    (this.OriginalCommand != null &&
                    this.OriginalCommand.Equals(input.OriginalCommand))
                ) && 
                (
                    this.Errored == input.Errored ||
                    (this.Errored != null &&
                    this.Errored.Equals(input.Errored))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalCommand != null)
                    hashCode = hashCode * 59 + this.OriginalCommand.GetHashCode();
                if (this.Errored != null)
                    hashCode = hashCode * 59 + this.Errored.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
