/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EcoServer-API.Client.SwaggerDateConverter;

namespace EcoServer-API.Model
{
    /// <summary>
    /// EcoWebServerDataTransferObjectsPluginInfo
    /// </summary>
    [DataContract]
    public partial class EcoWebServerDataTransferObjectsPluginInfo :  IEquatable<EcoWebServerDataTransferObjectsPluginInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EcoWebServerDataTransferObjectsPluginInfo" /> class.
        /// </summary>
        /// <param name="typeName">typeName.</param>
        /// <param name="status">status.</param>
        /// <param name="hasConfig">hasConfig.</param>
        public EcoWebServerDataTransferObjectsPluginInfo(string typeName = default(string), string status = default(string), bool? hasConfig = default(bool?))
        {
            this.TypeName = typeName;
            this.Status = status;
            this.HasConfig = hasConfig;
        }
        
        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name="typeName", EmitDefaultValue=false)]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets HasConfig
        /// </summary>
        [DataMember(Name="hasConfig", EmitDefaultValue=false)]
        public bool? HasConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EcoWebServerDataTransferObjectsPluginInfo {\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HasConfig: ").Append(HasConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EcoWebServerDataTransferObjectsPluginInfo);
        }

        /// <summary>
        /// Returns true if EcoWebServerDataTransferObjectsPluginInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of EcoWebServerDataTransferObjectsPluginInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EcoWebServerDataTransferObjectsPluginInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.HasConfig == input.HasConfig ||
                    (this.HasConfig != null &&
                    this.HasConfig.Equals(input.HasConfig))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TypeName != null)
                    hashCode = hashCode * 59 + this.TypeName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.HasConfig != null)
                    hashCode = hashCode * 59 + this.HasConfig.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
