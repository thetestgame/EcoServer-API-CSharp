/* 
 * Eco Game API
 *
 * First API draft for Eco. Heavy work in progress and subject to changes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using EcoServer-API.Client;
using EcoServer-API.Api;
using EcoServer-API.Model;

namespace EcoServer-API.Test
{
    /// <summary>
    ///  Class for testing StatsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StatsApiTests
    {
        private StatsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StatsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StatsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StatsApi
            //Assert.IsInstanceOfType(typeof(StatsApi), instance, "instance is a StatsApi");
        }

        
        /// <summary>
        /// Test StatsGenerateTestData
        /// </summary>
        [Test]
        public void StatsGenerateTestDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //float? days = null;
            //int? users = null;
            //bool? generateClimateData = null;
            //float? pollutionMultiplier = null;
            //instance.StatsGenerateTestData(authtoken, authtokentype, days, users, generateClimateData, pollutionMultiplier);
            
        }
        
        /// <summary>
        /// Test StatsGet
        /// </summary>
        [Test]
        public void StatsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //string dataset = null;
            //double? dayStart = null;
            //double? dayEnd = null;
            //var response = instance.StatsGet(authtoken, authtokentype, dataset, dayStart, dayEnd);
            //Assert.IsInstanceOf<EcoWebServerWebControllersStatReturn> (response, "response is EcoWebServerWebControllersStatReturn");
        }
        
        /// <summary>
        /// Test StatsGetFlatList
        /// </summary>
        [Test]
        public void StatsGetFlatListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //var response = instance.StatsGetFlatList(authtoken, authtokentype);
            //Assert.IsInstanceOf<List<EcoStatsStatInfo>> (response, "response is List<EcoStatsStatInfo>");
        }
        
        /// <summary>
        /// Test StatsGetList
        /// </summary>
        [Test]
        public void StatsGetListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //List<string> requestedSets = null;
            //double? dayStart = null;
            //double? dayEnd = null;
            //var response = instance.StatsGetList(authtoken, authtokentype, requestedSets, dayStart, dayEnd);
            //Assert.IsInstanceOf<List<EcoWebServerWebControllersStatReturn>> (response, "response is List<EcoWebServerWebControllersStatReturn>");
        }
        
        /// <summary>
        /// Test StatsGetTimeRange
        /// </summary>
        [Test]
        public void StatsGetTimeRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //var response = instance.StatsGetTimeRange(authtoken, authtokentype);
            //Assert.IsInstanceOf<List<float?>> (response, "response is List<float?>");
        }
        
        /// <summary>
        /// Test StatsGetTreeList
        /// </summary>
        [Test]
        public void StatsGetTreeListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //var response = instance.StatsGetTreeList(authtoken, authtokentype);
            //Assert.IsInstanceOf<EcoStatsStatCategory> (response, "response is EcoStatsStatCategory");
        }
        
        /// <summary>
        /// Test StatsGraphs
        /// </summary>
        [Test]
        public void StatsGraphsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authtoken = null;
            //string authtokentype = null;
            //var response = instance.StatsGraphs(authtoken, authtokentype);
            //Assert.IsInstanceOf<List<EcoStatsNamedGraph>> (response, "response is List<EcoStatsNamedGraph>");
        }
        
    }

}
